!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ATI_FT_BIAS	main.cpp	/^    float ATI_FT_BIAS[6]                   = {0.0};$/;"	v
ATI_FT_BIAS2	main.cpp	/^    float ATI_FT_BIAS2[6]                  = {0.0};$/;"	v
ATI_FT_BIAS_MATRIX	main.cpp	/^    float ATI_FT_BIAS_MATRIX[BIAS_NUM][6]  = {{0.0}};$/;"	v
ATI_FT_BIAS_MATRIX2	main.cpp	/^    float ATI_FT_BIAS_MATRIX2[BIAS_NUM][6] = {{0.0}};$/;"	v
F0_l	main.cpp	/^std::vector<double> F0_l, F1_l, F2_l, T0_l, T1_l, T2_l, F0_r, F1_r, F2_r, T0_r, T1_r, T2_r;$/;"	v
F0_r	main.cpp	/^std::vector<double> F0_l, F1_l, F2_l, T0_l, T1_l, T2_l, F0_r, F1_r, F2_r, T0_r, T1_r, T2_r;$/;"	v
F1_l	main.cpp	/^std::vector<double> F0_l, F1_l, F2_l, T0_l, T1_l, T2_l, F0_r, F1_r, F2_r, T0_r, T1_r, T2_r;$/;"	v
F1_r	main.cpp	/^std::vector<double> F0_l, F1_l, F2_l, T0_l, T1_l, T2_l, F0_r, F1_r, F2_r, T0_r, T1_r, T2_r;$/;"	v
F2_l	main.cpp	/^std::vector<double> F0_l, F1_l, F2_l, T0_l, T1_l, T2_l, F0_r, F1_r, F2_r, T0_r, T1_r, T2_r;$/;"	v
F2_r	main.cpp	/^std::vector<double> F0_l, F1_l, F2_l, T0_l, T1_l, T2_l, F0_r, F1_r, F2_r, T0_r, T1_r, T2_r;$/;"	v
FORCE_DATA_l	main.cpp	/^    float FORCE_DATA_l[3]                  = {0.0};$/;"	v
FORCE_DATA_r	main.cpp	/^    float FORCE_DATA_r[3]                  = {0.0};$/;"	v
ForwardKinematic	zmp-bkp_today.cpp	/^void Robot::ForwardKinematic(int left, dlib::matrix<double, 6,1> q, dlib::matrix<double, 6, 1> * state){$/;"	f	class:Robot
ForwardKinematic	zmp_ctrl.bkp.cpp	/^void Robot::ForwardKinematic(int left, dlib::matrix<double, 6,1> q, dlib::matrix<double, 6, 1> * state){$/;"	f	class:Robot
ForwardKinematic	zmp_ctrl.cpp	/^    void Robot::ForwardKinematic(int left, dlib::matrix<double, 6,1> q, dlib::matrix<double, 6, 1> * state){$/;"	f	class:Robot
ForwardKinematic	zmptmp.cpp	/^void Robot::ForwardKinematic(int left, dlib::matrix<double, 6,1> q, dlib::matrix<double, 6, 1> * state){$/;"	f	class:Robot
ForwardKinematic_COM	zmp-bkp_today.cpp	/^void Robot::ForwardKinematic_COM(int left, dlib::matrix<double, 6,1> q, dlib::matrix<double, 6, 1> * state){$/;"	f	class:Robot
ForwardKinematic_COM	zmp_ctrl.bkp.cpp	/^void Robot::ForwardKinematic_COM(int left, dlib::matrix<double, 6,1> q, dlib::matrix<double, 6, 1> * state){$/;"	f	class:Robot
ForwardKinematic_COM	zmp_ctrl.cpp	/^    void Robot::ForwardKinematic_COM(int left, dlib::matrix<double, 6,1> q, dlib::matrix<double, 6, 1> * state){$/;"	f	class:Robot
ForwardKinematic_COM	zmptmp.cpp	/^void Robot::ForwardKinematic_COM(int left, dlib::matrix<double, 6,1> q, dlib::matrix<double, 6, 1> * state){$/;"	f	class:Robot
Fzl	main.cpp	/^double ZMP_x_measure, ZMP_y_measure, position_left_foot_x, position_right_foot_x, Fzl;$/;"	v
Instructtion_velocity_max_torque	main.cpp	/^    float Instructtion_velocity_max_torque = 60;    \/\/instruction velocity to generate 300 torque$/;"	v
InverseKinematics_analytical	zmp-bkp_today.cpp	/^dlib::matrix<double, 6, 1> Robot::InverseKinematics_analytical(joint_state Foot, joint_state Body){$/;"	f	class:Robot
InverseKinematics_analytical	zmp_ctrl.bkp.cpp	/^dlib::matrix<double, 6, 1> Robot::InverseKinematics_analytical(joint_state Foot, joint_state Body){$/;"	f	class:Robot
InverseKinematics_analytical	zmp_ctrl.cpp	/^dlib::matrix<double, 6, 1> Robot::InverseKinematics_analytical(joint_state Foot, joint_state Body){$/;"	f	class:Robot
InverseKinematics_analytical	zmptmp.cpp	/^dlib::matrix<double, 6, 1> Robot::InverseKinematics_analytical(joint_state Foot, joint_state Body){$/;"	f	class:Robot
KalmanFilter	kalman.cpp	/^KalmanFilter::KalmanFilter(){};$/;"	f	class:KalmanFilter
KalmanFilter	kalman.cpp	/^KalmanFilter::KalmanFilter(dlib::matrix<double> A, dlib::matrix<double> B, dlib::matrix<double> C,$/;"	f	class:KalmanFilter
KalmanFilter	kalman_carttable.cpp	/^KalmanFilter::KalmanFilter(){};$/;"	f	class:KalmanFilter
KalmanFilter	kalman_carttable.cpp	/^KalmanFilter::KalmanFilter(dlib::matrix<double> A, dlib::matrix<double> B, dlib::matrix<double> C,$/;"	f	class:KalmanFilter
KalmanFilter	kalman_no_offset.cpp	/^KalmanFilter::KalmanFilter(){};$/;"	f	class:KalmanFilter
KalmanFilter	kalman_no_offset.cpp	/^KalmanFilter::KalmanFilter(dlib::matrix<double> A, dlib::matrix<double> B, dlib::matrix<double> C,$/;"	f	class:KalmanFilter
KalmanFilter	kalman_stephen.cpp	/^KalmanFilter::KalmanFilter(){};$/;"	f	class:KalmanFilter
KalmanFilter	kalman_stephen.cpp	/^KalmanFilter::KalmanFilter(dlib::matrix<double> A, dlib::matrix<double> B, dlib::matrix<double> C,$/;"	f	class:KalmanFilter
Kd1	main.cpp	/^    float Kd1 = negtive_torque_max_velocity \/ Velocity_Max;$/;"	v
Kd2	main.cpp	/^    float Kd2 = outMax \/ Instructtion_velocity_max_torque \/ DEGREE_TO_REG_VALUE_SF ;$/;"	v
Ki	main.cpp	/^    float Ki = outMax * CTRL_PERIOD_S \/ DEGREE_TO_REG_VALUE_SF \/ time_to_max_torque_s;$/;"	v
Kp	main.cpp	/^    float Kp = outMax \/ DEGREE_TO_REG_VALUE_SF \/ error_theta_max_torque_degree;$/;"	v
Motion_Ctrl	motion_ctrl.cpp	/^Motion_Ctrl::Motion_Ctrl(float time)$/;"	f	class:Motion_Ctrl
Robot	zmp-bkp_today.cpp	/^    Robot::Robot(int mode){$/;"	f	class:Robot
Robot	zmp-bkp_today.cpp	/^Robot::Robot(Parameters robot_parameters, int mode){$/;"	f	class:Robot
Robot	zmp_ctrl.bkp.cpp	/^Robot::Robot(Parameters robot_parameters, int mode){$/;"	f	class:Robot
Robot	zmp_ctrl.bkp.cpp	/^Robot::Robot(int mode){$/;"	f	class:Robot
Robot	zmp_ctrl.cpp	/^Robot::Robot(Parameters robot_parameters, int mode){$/;"	f	class:Robot
Robot	zmp_ctrl.cpp	/^Robot::Robot(int mode){$/;"	f	class:Robot
Robot	zmptmp.cpp	/^    Robot::Robot(int mode){$/;"	f	class:Robot
Robot	zmptmp.cpp	/^Robot::Robot(Parameters robot_parameters, int mode){$/;"	f	class:Robot
Robot_Model	motion_ctrl.cpp	/^Robot_Model::Robot_Model()$/;"	f	class:Robot_Model
Rpitch	zmp-bkp_today.cpp	/^dlib::matrix<double, 3, 3> Robot::Rpitch(double theta){$/;"	f	class:Robot
Rpitch	zmp_ctrl.bkp.cpp	/^dlib::matrix<double, 3, 3> Robot::Rpitch(double theta){$/;"	f	class:Robot
Rpitch	zmp_ctrl.cpp	/^dlib::matrix<double, 3, 3> Robot::Rpitch(double theta){$/;"	f	class:Robot
Rpitch	zmptmp.cpp	/^dlib::matrix<double, 3, 3> Robot::Rpitch(double theta){$/;"	f	class:Robot
Rroll	zmp-bkp_today.cpp	/^dlib::matrix<double, 3, 3> Robot::Rroll(double phi){$/;"	f	class:Robot
Rroll	zmp_ctrl.bkp.cpp	/^dlib::matrix<double, 3, 3> Robot::Rroll(double phi){$/;"	f	class:Robot
Rroll	zmp_ctrl.cpp	/^dlib::matrix<double, 3, 3> Robot::Rroll(double phi){$/;"	f	class:Robot
Rroll	zmptmp.cpp	/^dlib::matrix<double, 3, 3> Robot::Rroll(double phi){$/;"	f	class:Robot
Ryaw	zmp-bkp_today.cpp	/^dlib::matrix<double, 3, 3> Robot::Ryaw(double psi){$/;"	f	class:Robot
Ryaw	zmp_ctrl.bkp.cpp	/^dlib::matrix<double, 3, 3> Robot::Ryaw(double psi){$/;"	f	class:Robot
Ryaw	zmp_ctrl.cpp	/^dlib::matrix<double, 3, 3> Robot::Ryaw(double psi){$/;"	f	class:Robot
Ryaw	zmptmp.cpp	/^dlib::matrix<double, 3, 3> Robot::Ryaw(double psi){$/;"	f	class:Robot
T0_l	main.cpp	/^std::vector<double> F0_l, F1_l, F2_l, T0_l, T1_l, T2_l, F0_r, F1_r, F2_r, T0_r, T1_r, T2_r;$/;"	v
T0_r	main.cpp	/^std::vector<double> F0_l, F1_l, F2_l, T0_l, T1_l, T2_l, F0_r, F1_r, F2_r, T0_r, T1_r, T2_r;$/;"	v
T1_l	main.cpp	/^std::vector<double> F0_l, F1_l, F2_l, T0_l, T1_l, T2_l, F0_r, F1_r, F2_r, T0_r, T1_r, T2_r;$/;"	v
T1_r	main.cpp	/^std::vector<double> F0_l, F1_l, F2_l, T0_l, T1_l, T2_l, F0_r, F1_r, F2_r, T0_r, T1_r, T2_r;$/;"	v
T2_l	main.cpp	/^std::vector<double> F0_l, F1_l, F2_l, T0_l, T1_l, T2_l, F0_r, F1_r, F2_r, T0_r, T1_r, T2_r;$/;"	v
T2_r	main.cpp	/^std::vector<double> F0_l, F1_l, F2_l, T0_l, T1_l, T2_l, F0_r, F1_r, F2_r, T0_r, T1_r, T2_r;$/;"	v
TORQUE_DATA_l	main.cpp	/^    float TORQUE_DATA_l[3]                 = {0.0};$/;"	v
TORQUE_DATA_r	main.cpp	/^    float TORQUE_DATA_r[3]                 = {0.0};$/;"	v
Time_Initial	main.cpp	/^    double Time_Initial;$/;"	v
Time_Now	main.cpp	/^    double Time_Now, t_control;$/;"	v
Velocity_Max	main.cpp	/^    int32_t Velocity_Max = 16613;   \/\/33.1*501.9 = 16612.89$/;"	v
Velocity_Min	main.cpp	/^    int32_t Velocity_Min = -16613;$/;"	v
X_ref	main.cpp	/^    std::vector<dlib::matrix<double,3,1>> X_ref, Y_ref, Z_ref, X_ref_all, X_ref_est, Y_ref_est, X_ref_pred, Y_ref_pred;$/;"	v
X_ref_all	main.cpp	/^    std::vector<dlib::matrix<double,3,1>> X_ref, Y_ref, Z_ref, X_ref_all, X_ref_est, Y_ref_est, X_ref_pred, Y_ref_pred;$/;"	v
X_ref_est	main.cpp	/^    std::vector<dlib::matrix<double,3,1>> X_ref, Y_ref, Z_ref, X_ref_all, X_ref_est, Y_ref_est, X_ref_pred, Y_ref_pred;$/;"	v
X_ref_pred	main.cpp	/^    std::vector<dlib::matrix<double,3,1>> X_ref, Y_ref, Z_ref, X_ref_all, X_ref_est, Y_ref_est, X_ref_pred, Y_ref_pred;$/;"	v
Y_ref	main.cpp	/^    std::vector<dlib::matrix<double,3,1>> X_ref, Y_ref, Z_ref, X_ref_all, X_ref_est, Y_ref_est, X_ref_pred, Y_ref_pred;$/;"	v
Y_ref_est	main.cpp	/^    std::vector<dlib::matrix<double,3,1>> X_ref, Y_ref, Z_ref, X_ref_all, X_ref_est, Y_ref_est, X_ref_pred, Y_ref_pred;$/;"	v
Y_ref_pred	main.cpp	/^    std::vector<dlib::matrix<double,3,1>> X_ref, Y_ref, Z_ref, X_ref_all, X_ref_est, Y_ref_est, X_ref_pred, Y_ref_pred;$/;"	v
ZMP	main.cpp	/^    float ZMP[3]                           = {0.0};$/;"	v
ZMP2	main.cpp	/^    float ZMP2[3]                          = {0.0};$/;"	v
ZMP_x	main.cpp	/^    std::vector<float> ZMP_x, ZMP_x2, ZMP_y, ZMP_y2;$/;"	v
ZMP_x2	main.cpp	/^    std::vector<float> ZMP_x, ZMP_x2, ZMP_y, ZMP_y2;$/;"	v
ZMP_x_measure	main.cpp	/^double ZMP_x_measure, ZMP_y_measure, position_left_foot_x, position_right_foot_x, Fzl;$/;"	v
ZMP_x_measure_array	main.cpp	/^std::vector<double> ZMP_x_measure_array, ZMP_y_measure_array; $/;"	v
ZMP_xl	main.cpp	/^std::vector<double> ZMP_xl, ZMP_xr, ZMP_yl, ZMP_yr, ZMP_xl_raw, ZMP_xr_raw, ZMP_yl_raw, ZMP_yr_raw; $/;"	v
ZMP_xl_raw	main.cpp	/^std::vector<double> ZMP_xl, ZMP_xr, ZMP_yl, ZMP_yr, ZMP_xl_raw, ZMP_xr_raw, ZMP_yl_raw, ZMP_yr_raw; $/;"	v
ZMP_xr	main.cpp	/^std::vector<double> ZMP_xl, ZMP_xr, ZMP_yl, ZMP_yr, ZMP_xl_raw, ZMP_xr_raw, ZMP_yl_raw, ZMP_yr_raw; $/;"	v
ZMP_xr_raw	main.cpp	/^std::vector<double> ZMP_xl, ZMP_xr, ZMP_yl, ZMP_yr, ZMP_xl_raw, ZMP_xr_raw, ZMP_yl_raw, ZMP_yr_raw; $/;"	v
ZMP_y	main.cpp	/^    std::vector<float> ZMP_x, ZMP_x2, ZMP_y, ZMP_y2;$/;"	v
ZMP_y2	main.cpp	/^    std::vector<float> ZMP_x, ZMP_x2, ZMP_y, ZMP_y2;$/;"	v
ZMP_y_measure	main.cpp	/^double ZMP_x_measure, ZMP_y_measure, position_left_foot_x, position_right_foot_x, Fzl;$/;"	v
ZMP_y_measure_array	main.cpp	/^std::vector<double> ZMP_x_measure_array, ZMP_y_measure_array; $/;"	v
ZMP_yl	main.cpp	/^std::vector<double> ZMP_xl, ZMP_xr, ZMP_yl, ZMP_yr, ZMP_xl_raw, ZMP_xr_raw, ZMP_yl_raw, ZMP_yr_raw; $/;"	v
ZMP_yl_raw	main.cpp	/^std::vector<double> ZMP_xl, ZMP_xr, ZMP_yl, ZMP_yr, ZMP_xl_raw, ZMP_xr_raw, ZMP_yl_raw, ZMP_yr_raw; $/;"	v
ZMP_yr	main.cpp	/^std::vector<double> ZMP_xl, ZMP_xr, ZMP_yl, ZMP_yr, ZMP_xl_raw, ZMP_xr_raw, ZMP_yl_raw, ZMP_yr_raw; $/;"	v
ZMP_yr_raw	main.cpp	/^std::vector<double> ZMP_xl, ZMP_xr, ZMP_yl, ZMP_yr, ZMP_xl_raw, ZMP_xr_raw, ZMP_yl_raw, ZMP_yr_raw; $/;"	v
Z_ref	main.cpp	/^    std::vector<dlib::matrix<double,3,1>> X_ref, Y_ref, Z_ref, X_ref_all, X_ref_est, Y_ref_est, X_ref_pred, Y_ref_pred;$/;"	v
acc_xf	main.cpp	/^double acc_xh, acc_yh, acc_zh, acc_xf, acc_yf, acc_zf;$/;"	v
acc_xf_vector	main.cpp	/^std::vector<double> acc_xh_vector, acc_yh_vector, acc_zh_vector, acc_xf_vector, acc_yf_vector, acc_zf_vector;$/;"	v
acc_xh	main.cpp	/^double acc_xh, acc_yh, acc_zh, acc_xf, acc_yf, acc_zf;$/;"	v
acc_xh_vector	main.cpp	/^std::vector<double> acc_xh_vector, acc_yh_vector, acc_zh_vector, acc_xf_vector, acc_yf_vector, acc_zf_vector;$/;"	v
acc_yf	main.cpp	/^double acc_xh, acc_yh, acc_zh, acc_xf, acc_yf, acc_zf;$/;"	v
acc_yf_vector	main.cpp	/^std::vector<double> acc_xh_vector, acc_yh_vector, acc_zh_vector, acc_xf_vector, acc_yf_vector, acc_zf_vector;$/;"	v
acc_yh	main.cpp	/^double acc_xh, acc_yh, acc_zh, acc_xf, acc_yf, acc_zf;$/;"	v
acc_yh_vector	main.cpp	/^std::vector<double> acc_xh_vector, acc_yh_vector, acc_zh_vector, acc_xf_vector, acc_yf_vector, acc_zf_vector;$/;"	v
acc_zf	main.cpp	/^double acc_xh, acc_yh, acc_zh, acc_xf, acc_yf, acc_zf;$/;"	v
acc_zf_vector	main.cpp	/^std::vector<double> acc_xh_vector, acc_yh_vector, acc_zh_vector, acc_xf_vector, acc_yf_vector, acc_zf_vector;$/;"	v
acc_zh	main.cpp	/^double acc_xh, acc_yh, acc_zh, acc_xf, acc_yf, acc_zf;$/;"	v
acc_zh_vector	main.cpp	/^std::vector<double> acc_xh_vector, acc_yh_vector, acc_zh_vector, acc_xf_vector, acc_yf_vector, acc_zf_vector;$/;"	v
alpha_vector	main.cpp	/^std::vector<double> alpha_vector;$/;"	v
ascended_before	main.cpp	/^int ascended_before;$/;"	v
ati_not_working	zmp-bkp_today.cpp	/^    int Robot::ati_not_working(){$/;"	f	class:Robot
ati_not_working	zmp_ctrl.bkp.cpp	/^int Robot::ati_not_working(){$/;"	f	class:Robot
ati_not_working	zmp_ctrl.cpp	/^int Robot::ati_not_working(){$/;"	f	class:Robot
ati_not_working	zmptmp.cpp	/^    int Robot::ati_not_working(){$/;"	f	class:Robot
calc_g_j	zmp-bkp_today.cpp	/^double Robot::calc_g_j( int j, int N, dlib::matrix<double> f_tilde){$/;"	f	class:Robot
calc_g_j	zmp_ctrl.bkp.cpp	/^double Robot::calc_g_j( int j, int N, dlib::matrix<double> f_tilde){$/;"	f	class:Robot
calc_g_j	zmp_ctrl.cpp	/^double Robot::calc_g_j( int j, int N, dlib::matrix<double> f_tilde){$/;"	f	class:Robot
calc_g_j	zmptmp.cpp	/^double Robot::calc_g_j( int j, int N, dlib::matrix<double> f_tilde){$/;"	f	class:Robot
calc_next_COM_position	zmp-bkp_today.cpp	/^void Robot::calc_next_COM_position(){$/;"	f	class:Robot
calc_next_COM_position	zmp_ctrl.bkp.cpp	/^void Robot::calc_next_COM_position(){$/;"	f	class:Robot
calc_next_COM_position	zmp_ctrl.cpp	/^void Robot::calc_next_COM_position(){$/;"	f	class:Robot
calc_next_COM_position	zmptmp.cpp	/^void Robot::calc_next_COM_position(){$/;"	f	class:Robot
calc_p_ref	zmp-bkp_today.cpp	/^void Robot::calc_p_ref( std::vector<double> *p_ref_x, std::vector<double> *p_ref_y ){$/;"	f	class:Robot
calc_p_ref	zmp_ctrl.bkp.cpp	/^void Robot::calc_p_ref( std::vector<double> *p_ref_x, std::vector<double> *p_ref_y ){$/;"	f	class:Robot
calc_p_ref	zmp_ctrl.cpp	/^void Robot::calc_p_ref( std::vector<double> *p_ref_x, std::vector<double> *p_ref_y ){$/;"	f	class:Robot
calc_p_ref	zmptmp.cpp	/^void Robot::calc_p_ref( std::vector<double> *p_ref_x, std::vector<double> *p_ref_y ){$/;"	f	class:Robot
calc_p_ref_heel	zmp-bkp_today.cpp	/^    void Robot::calc_p_ref_heel(){$/;"	f	class:Robot
calc_p_ref_heel	zmp_ctrl.bkp.cpp	/^void Robot::calc_p_ref_heel(){$/;"	f	class:Robot
calc_p_ref_heel	zmp_ctrl.cpp	/^void Robot::calc_p_ref_heel(){$/;"	f	class:Robot
calc_p_ref_heel	zmptmp.cpp	/^    void Robot::calc_p_ref_heel(){$/;"	f	class:Robot
calc_p_ref_heel_straight	zmp_ctrl.cpp	/^void Robot::calc_p_ref_heel_straight(int forward, int leftFootStart, int step_amount, double step_length){$/;"	f	class:Robot
calc_p_ref_only_ssp	zmp-bkp_today.cpp	/^void Robot::calc_p_ref_only_ssp(){$/;"	f	class:Robot
calc_p_ref_only_ssp	zmp_ctrl.bkp.cpp	/^void Robot::calc_p_ref_only_ssp(){$/;"	f	class:Robot
calc_p_ref_only_ssp	zmp_ctrl.cpp	/^void Robot::calc_p_ref_only_ssp(){$/;"	f	class:Robot
calc_p_ref_only_ssp	zmptmp.cpp	/^void Robot::calc_p_ref_only_ssp(){$/;"	f	class:Robot
calc_p_ref_straight	zmp_ctrl.cpp	/^void Robot::calc_p_ref_straight( std::vector<double> *p_ref_x, std::vector<double> *p_ref_y, int forward, int leftFootStart, int step_amount, double step_length ){$/;"	f	class:Robot
calc_p_ref_transition	zmp-bkp_today.cpp	/^void Robot::calc_p_ref_transition(){$/;"	f	class:Robot
calc_p_ref_transition	zmp_ctrl.bkp.cpp	/^void Robot::calc_p_ref_transition(){$/;"	f	class:Robot
calc_p_ref_transition	zmp_ctrl.cpp	/^void Robot::calc_p_ref_transition(){$/;"	f	class:Robot
calc_p_ref_transition	zmptmp.cpp	/^void Robot::calc_p_ref_transition(){$/;"	f	class:Robot
calc_p_ref_transition_only_dsp_sine	zmp-bkp_today.cpp	/^void Robot::calc_p_ref_transition_only_dsp_sine(){$/;"	f	class:Robot
calc_p_ref_transition_only_dsp_sine	zmp_ctrl.bkp.cpp	/^void Robot::calc_p_ref_transition_only_dsp_sine(){$/;"	f	class:Robot
calc_p_ref_transition_only_dsp_sine	zmp_ctrl.cpp	/^void Robot::calc_p_ref_transition_only_dsp_sine(){$/;"	f	class:Robot
calc_p_ref_transition_only_dsp_sine	zmptmp.cpp	/^void Robot::calc_p_ref_transition_only_dsp_sine(){$/;"	f	class:Robot
calc_p_ref_transition_only_ssp	zmp-bkp_today.cpp	/^void Robot::calc_p_ref_transition_only_ssp(){$/;"	f	class:Robot
calc_p_ref_transition_only_ssp	zmp_ctrl.bkp.cpp	/^void Robot::calc_p_ref_transition_only_ssp(){$/;"	f	class:Robot
calc_p_ref_transition_only_ssp	zmp_ctrl.cpp	/^void Robot::calc_p_ref_transition_only_ssp(){$/;"	f	class:Robot
calc_p_ref_transition_only_ssp	zmptmp.cpp	/^void Robot::calc_p_ref_transition_only_ssp(){$/;"	f	class:Robot
calc_p_ref_transition_only_ssp_sine	zmp-bkp_today.cpp	/^void Robot::calc_p_ref_transition_only_ssp_sine(){$/;"	f	class:Robot
calc_p_ref_transition_only_ssp_sine	zmp_ctrl.bkp.cpp	/^void Robot::calc_p_ref_transition_only_ssp_sine(){$/;"	f	class:Robot
calc_p_ref_transition_only_ssp_sine	zmp_ctrl.cpp	/^void Robot::calc_p_ref_transition_only_ssp_sine(){$/;"	f	class:Robot
calc_p_ref_transition_only_ssp_sine	zmptmp.cpp	/^void Robot::calc_p_ref_transition_only_ssp_sine(){$/;"	f	class:Robot
calc_p_ref_transition_straight	zmp_ctrl.cpp	/^void Robot::calc_p_ref_transition_straight(int forward, int leftFootStart, int step_amount, double step_length){$/;"	f	class:Robot
calc_trajectories_ssp_squat	zmp-bkp_today.cpp	/^void Robot::calc_trajectories_ssp_squat(){};$/;"	f	class:Robot
calc_trajectories_ssp_squat	zmp_ctrl.bkp.cpp	/^void Robot::calc_trajectories_ssp_squat(){};$/;"	f	class:Robot
calc_trajectories_ssp_squat	zmp_ctrl.cpp	/^void Robot::calc_trajectories_ssp_squat(){};$/;"	f	class:Robot
calc_trajectories_ssp_squat	zmptmp.cpp	/^void Robot::calc_trajectories_ssp_squat(){};$/;"	f	class:Robot
calc_trajectories_stand_dsp_sine	zmp-bkp_today.cpp	/^void Robot::calc_trajectories_stand_dsp_sine(){$/;"	f	class:Robot
calc_trajectories_stand_dsp_sine	zmp_ctrl.bkp.cpp	/^void Robot::calc_trajectories_stand_dsp_sine(){$/;"	f	class:Robot
calc_trajectories_stand_dsp_sine	zmp_ctrl.cpp	/^void Robot::calc_trajectories_stand_dsp_sine(){$/;"	f	class:Robot
calc_trajectories_stand_dsp_sine	zmptmp.cpp	/^void Robot::calc_trajectories_stand_dsp_sine(){$/;"	f	class:Robot
calc_trajectories_stand_ssp	zmp-bkp_today.cpp	/^void Robot::calc_trajectories_stand_ssp(){$/;"	f	class:Robot
calc_trajectories_stand_ssp	zmp_ctrl.bkp.cpp	/^void Robot::calc_trajectories_stand_ssp(){$/;"	f	class:Robot
calc_trajectories_stand_ssp	zmp_ctrl.cpp	/^void Robot::calc_trajectories_stand_ssp(){$/;"	f	class:Robot
calc_trajectories_stand_ssp	zmptmp.cpp	/^void Robot::calc_trajectories_stand_ssp(){$/;"	f	class:Robot
calc_trajectories_stand_ssp_sine	zmp-bkp_today.cpp	/^void Robot::calc_trajectories_stand_ssp_sine(){$/;"	f	class:Robot
calc_trajectories_stand_ssp_sine	zmp_ctrl.bkp.cpp	/^void Robot::calc_trajectories_stand_ssp_sine(){$/;"	f	class:Robot
calc_trajectories_stand_ssp_sine	zmp_ctrl.cpp	/^void Robot::calc_trajectories_stand_ssp_sine(){$/;"	f	class:Robot
calc_trajectories_stand_ssp_sine	zmptmp.cpp	/^void Robot::calc_trajectories_stand_ssp_sine(){$/;"	f	class:Robot
calc_trajectories_walk	zmp-bkp_today.cpp	/^void Robot::calc_trajectories_walk(){    $/;"	f	class:Robot
calc_trajectories_walk	zmp_ctrl.bkp.cpp	/^void Robot::calc_trajectories_walk(){    $/;"	f	class:Robot
calc_trajectories_walk	zmp_ctrl.cpp	/^void Robot::calc_trajectories_walk(){    $/;"	f	class:Robot
calc_trajectories_walk	zmptmp.cpp	/^void Robot::calc_trajectories_walk(){    $/;"	f	class:Robot
calc_trajectories_walk_curve	zmp_ctrl.cpp	/^void Robot::calc_trajectories_walk_curve(int forward, int leftFootStart, double x_goal, double y_goal, double psi_goal){    $/;"	f	class:Robot
calc_trajectories_walk_straight	zmp_ctrl.cpp	/^void Robot::calc_trajectories_walk_straight(int forward, int leftFootStart, int step_amount, double step_length){    $/;"	f	class:Robot
calculateComToAnkle	zmp-bkp_today.cpp	/^void Robot::calculateComToAnkle(  dlib::matrix<double, 3,1> COM, dlib::matrix<double, 3,1> ankle, dlib::matrix<double, 3,1> * direction){$/;"	f	class:Robot
calculateComToAnkle	zmp_ctrl.bkp.cpp	/^void Robot::calculateComToAnkle(  dlib::matrix<double, 3,1> COM, dlib::matrix<double, 3,1> ankle, dlib::matrix<double, 3,1> * direction){$/;"	f	class:Robot
calculateComToAnkle	zmp_ctrl.cpp	/^void Robot::calculateComToAnkle(  dlib::matrix<double, 3,1> COM, dlib::matrix<double, 3,1> ankle, dlib::matrix<double, 3,1> * direction){$/;"	f	class:Robot
calculateComToAnkle	zmptmp.cpp	/^void Robot::calculateComToAnkle(  dlib::matrix<double, 3,1> COM, dlib::matrix<double, 3,1> ankle, dlib::matrix<double, 3,1> * direction){$/;"	f	class:Robot
calculate_X_ref_integrated	zmp-bkp_today.cpp	/^void Robot::calculate_X_ref_integrated(double p_measured, std::vector<double> p_ref, int useEst,$/;"	f	class:Robot
calculate_X_ref_integrated	zmp_ctrl.bkp.cpp	/^void Robot::calculate_X_ref_integrated(double p_measured, std::vector<double> p_ref, int useEst,$/;"	f	class:Robot
calculate_X_ref_integrated	zmp_ctrl.cpp	/^void Robot::calculate_X_ref_integrated(double p_measured, std::vector<double> p_ref, int useEst,$/;"	f	class:Robot
calculate_X_ref_integrated	zmptmp.cpp	/^void Robot::calculate_X_ref_integrated(double p_measured, std::vector<double> p_ref, int useEst,$/;"	f	class:Robot
calculate_ZMP	zmp-bkp_today.cpp	/^void Robot::calculate_ZMP(){$/;"	f	class:Robot
calculate_ZMP	zmp_ctrl.bkp.cpp	/^void Robot::calculate_ZMP(){$/;"	f	class:Robot
calculate_ZMP	zmp_ctrl.cpp	/^void Robot::calculate_ZMP(){$/;"	f	class:Robot
calculate_ZMP	zmptmp.cpp	/^void Robot::calculate_ZMP(){$/;"	f	class:Robot
calculate_absolute_foot_position	zmp-bkp_today.cpp	/^void Robot::calculate_absolute_foot_position(){$/;"	f	class:Robot
calculate_absolute_foot_position	zmp_ctrl.bkp.cpp	/^void Robot::calculate_absolute_foot_position(){$/;"	f	class:Robot
calculate_absolute_foot_position	zmp_ctrl.cpp	/^    void Robot::calculate_absolute_foot_position(){$/;"	f	class:Robot
calculate_absolute_foot_position	zmptmp.cpp	/^void Robot::calculate_absolute_foot_position(){$/;"	f	class:Robot
calculate_gravity_compsation	motion_ctrl.cpp	/^void Robot_Model::calculate_gravity_compsation()$/;"	f	class:Robot_Model
calculate_swing_foot_complete_trajectory_heel	zmp-bkp_today.cpp	/^void Robot::calculate_swing_foot_complete_trajectory_heel(std::vector<double> p_ref_x, std::vector<double> p_ref_y,  $/;"	f	class:Robot
calculate_swing_foot_complete_trajectory_heel	zmp_ctrl.bkp.cpp	/^void Robot::calculate_swing_foot_complete_trajectory_heel(std::vector<double> p_ref_x, std::vector<double> p_ref_y,  $/;"	f	class:Robot
calculate_swing_foot_complete_trajectory_heel	zmp_ctrl.cpp	/^void Robot::calculate_swing_foot_complete_trajectory_heel(std::vector<double> p_ref_x, std::vector<double> p_ref_y,  $/;"	f	class:Robot
calculate_swing_foot_complete_trajectory_heel	zmptmp.cpp	/^void Robot::calculate_swing_foot_complete_trajectory_heel(std::vector<double> p_ref_x, std::vector<double> p_ref_y,  $/;"	f	class:Robot
calculate_swing_foot_complete_trajectory_heel_straight	zmp_ctrl.cpp	/^void Robot::calculate_swing_foot_complete_trajectory_heel_straight(std::vector<double> p_ref_x, std::vector<double> p_ref_y,  $/;"	f	class:Robot
calculate_swing_foot_complete_trajectory_only_dsp	zmp-bkp_today.cpp	/^void Robot::calculate_swing_foot_complete_trajectory_only_dsp(std::vector<double> p_ref_x, std::vector<double> p_ref_y,$/;"	f	class:Robot
calculate_swing_foot_complete_trajectory_only_dsp	zmp_ctrl.bkp.cpp	/^void Robot::calculate_swing_foot_complete_trajectory_only_dsp(std::vector<double> p_ref_x, std::vector<double> p_ref_y,$/;"	f	class:Robot
calculate_swing_foot_complete_trajectory_only_dsp	zmp_ctrl.cpp	/^void Robot::calculate_swing_foot_complete_trajectory_only_dsp(std::vector<double> p_ref_x, std::vector<double> p_ref_y,$/;"	f	class:Robot
calculate_swing_foot_complete_trajectory_only_dsp	zmptmp.cpp	/^void Robot::calculate_swing_foot_complete_trajectory_only_dsp(std::vector<double> p_ref_x, std::vector<double> p_ref_y,$/;"	f	class:Robot
calculate_swing_foot_complete_trajectory_only_ssp	zmp-bkp_today.cpp	/^void Robot::calculate_swing_foot_complete_trajectory_only_ssp(std::vector<double> p_ref_x, std::vector<double> p_ref_y,$/;"	f	class:Robot
calculate_swing_foot_complete_trajectory_only_ssp	zmp_ctrl.bkp.cpp	/^void Robot::calculate_swing_foot_complete_trajectory_only_ssp(std::vector<double> p_ref_x, std::vector<double> p_ref_y,$/;"	f	class:Robot
calculate_swing_foot_complete_trajectory_only_ssp	zmp_ctrl.cpp	/^void Robot::calculate_swing_foot_complete_trajectory_only_ssp(std::vector<double> p_ref_x, std::vector<double> p_ref_y,$/;"	f	class:Robot
calculate_swing_foot_complete_trajectory_only_ssp	zmptmp.cpp	/^void Robot::calculate_swing_foot_complete_trajectory_only_ssp(std::vector<double> p_ref_x, std::vector<double> p_ref_y,$/;"	f	class:Robot
calculate_swing_foot_piece_trajectory_heel	zmp-bkp_today.cpp	/^void Robot::calculate_swing_foot_piece_trajectory_heel( int flag, double x_swing_foot_start, double x_swing_foot_end, double swing_foot_z_peak, double swing_foot_x_peak, double y,$/;"	f	class:Robot
calculate_swing_foot_piece_trajectory_heel	zmp_ctrl.bkp.cpp	/^void Robot::calculate_swing_foot_piece_trajectory_heel( int flag, double x_swing_foot_start, double x_swing_foot_end, double swing_foot_z_peak, double swing_foot_x_peak, double y,$/;"	f	class:Robot
calculate_swing_foot_piece_trajectory_heel	zmp_ctrl.cpp	/^void Robot::calculate_swing_foot_piece_trajectory_heel( int flag, double x_swing_foot_start, double x_swing_foot_end, double swing_foot_z_peak, double swing_foot_x_peak, double y,$/;"	f	class:Robot
calculate_swing_foot_piece_trajectory_heel	zmptmp.cpp	/^void Robot::calculate_swing_foot_piece_trajectory_heel( int flag, double x_swing_foot_start, double x_swing_foot_end, double swing_foot_z_peak, double swing_foot_x_peak, double y,$/;"	f	class:Robot
calculate_swing_foot_piece_trajectory_heel_straight	zmp_ctrl.cpp	/^void Robot::calculate_swing_foot_piece_trajectory_heel_straight( int flag, double x_swing_foot_start, double x_swing_foot_end, double swing_foot_z_peak, double swing_foot_x_peak, double y,$/;"	f	class:Robot
calculate_swing_foot_piece_trajectory_stay_at_height	zmp-bkp_today.cpp	/^void Robot::calculate_swing_foot_piece_trajectory_stay_at_height(int flag, double x_swing_foot_start, double x_swing_foot_end, double swing_foot_z_peak, double y,$/;"	f	class:Robot
calculate_swing_foot_piece_trajectory_stay_at_height	zmp_ctrl.bkp.cpp	/^void Robot::calculate_swing_foot_piece_trajectory_stay_at_height(int flag, double x_swing_foot_start, double x_swing_foot_end, double swing_foot_z_peak, double y,$/;"	f	class:Robot
calculate_swing_foot_piece_trajectory_stay_at_height	zmp_ctrl.cpp	/^void Robot::calculate_swing_foot_piece_trajectory_stay_at_height(int flag, double x_swing_foot_start, double x_swing_foot_end, double swing_foot_z_peak, double y,$/;"	f	class:Robot
calculate_swing_foot_piece_trajectory_stay_at_height	zmptmp.cpp	/^void Robot::calculate_swing_foot_piece_trajectory_stay_at_height(int flag, double x_swing_foot_start, double x_swing_foot_end, double swing_foot_z_peak, double y,$/;"	f	class:Robot
calculate_walking_pattern_ankle	zmp-bkp_today.cpp	/^void Robot::calculate_walking_pattern_ankle(){$/;"	f	class:Robot
calculate_walking_pattern_ankle	zmp_ctrl.bkp.cpp	/^void Robot::calculate_walking_pattern_ankle(){$/;"	f	class:Robot
calculate_walking_pattern_ankle	zmp_ctrl.cpp	/^void Robot::calculate_walking_pattern_ankle(){$/;"	f	class:Robot
calculate_walking_pattern_ankle	zmptmp.cpp	/^void Robot::calculate_walking_pattern_ankle(){$/;"	f	class:Robot
change_Tipping_Scale	zmp-bkp_today.cpp	/^void Robot::change_Tipping_Scale(){$/;"	f	class:Robot
change_Tipping_Scale	zmp_ctrl.cpp	/^void Robot::change_Tipping_Scale(){$/;"	f	class:Robot
change_Tipping_Scale	zmptmp.cpp	/^void Robot::change_Tipping_Scale(){$/;"	f	class:Robot
clipTime	zmp-bkp_today.cpp	/^void clipTime(double * time_passed, double * t_initial){$/;"	f
clipTime	zmp_ctrl.bkp.cpp	/^void clipTime(double * time_passed, double * t_initial){$/;"	f
clipTime	zmp_ctrl.cpp	/^void clipTime(double * time_passed, double * t_initial){$/;"	f
clipTime	zmptmp.cpp	/^void clipTime(double * time_passed, double * t_initial){$/;"	f
clipping1	main.cpp	/^std::vector<double> clipping1, clipping2, clipping3, clipping4, clipping5, clipping6, clipping7;$/;"	v
clipping2	main.cpp	/^std::vector<double> clipping1, clipping2, clipping3, clipping4, clipping5, clipping6, clipping7;$/;"	v
clipping3	main.cpp	/^std::vector<double> clipping1, clipping2, clipping3, clipping4, clipping5, clipping6, clipping7;$/;"	v
clipping4	main.cpp	/^std::vector<double> clipping1, clipping2, clipping3, clipping4, clipping5, clipping6, clipping7;$/;"	v
clipping5	main.cpp	/^std::vector<double> clipping1, clipping2, clipping3, clipping4, clipping5, clipping6, clipping7;$/;"	v
clipping6	main.cpp	/^std::vector<double> clipping1, clipping2, clipping3, clipping4, clipping5, clipping6, clipping7;$/;"	v
clipping7	main.cpp	/^std::vector<double> clipping1, clipping2, clipping3, clipping4, clipping5, clipping6, clipping7;$/;"	v
closest	zmp_ctrl.cpp	/^int Robot::closest(std::vector<double> const& vec, double value) {$/;"	f	class:Robot
controlPitch	zmp-bkp_today.cpp	/^    void Robot::controlPitch(){$/;"	f	class:Robot
controlPitch	zmp_ctrl.bkp.cpp	/^void Robot::controlPitch(){$/;"	f	class:Robot
controlPitch	zmp_ctrl.cpp	/^void Robot::controlPitch(){$/;"	f	class:Robot
controlPitch	zmptmp.cpp	/^    void Robot::controlPitch(){$/;"	f	class:Robot
controlRoll	zmp-bkp_today.cpp	/^void Robot::controlRoll(){$/;"	f	class:Robot
controlRoll	zmp_ctrl.bkp.cpp	/^void Robot::controlRoll(){$/;"	f	class:Robot
controlRoll	zmp_ctrl.cpp	/^void Robot::controlRoll(){$/;"	f	class:Robot
controlRoll	zmptmp.cpp	/^void Robot::controlRoll(){$/;"	f	class:Robot
control_leg_length	main.cpp	/^    int control_leg_length       = 0;$/;"	v
convert_foot2ankle	zmp-bkp_today.cpp	/^void Robot::convert_foot2ankle(joint_state foot, joint_state * ankle){$/;"	f	class:Robot
convert_foot2ankle	zmp_ctrl.bkp.cpp	/^void Robot::convert_foot2ankle(joint_state foot, joint_state * ankle){$/;"	f	class:Robot
convert_foot2ankle	zmp_ctrl.cpp	/^void Robot::convert_foot2ankle(joint_state foot, joint_state * ankle){$/;"	f	class:Robot
convert_foot2ankle	zmptmp.cpp	/^void Robot::convert_foot2ankle(joint_state foot, joint_state * ankle){$/;"	f	class:Robot
correct_state	kalman.cpp	/^void KalmanFilter::correct_state(dlib::matrix<double> measurement){$/;"	f	class:KalmanFilter
correct_state	kalman_carttable.cpp	/^void KalmanFilter::correct_state(dlib::matrix<double> measurement){$/;"	f	class:KalmanFilter
correct_state	kalman_no_offset.cpp	/^void KalmanFilter::correct_state(dlib::matrix<double> measurement){$/;"	f	class:KalmanFilter
correct_state	kalman_stephen.cpp	/^void KalmanFilter::correct_state(dlib::matrix<double> measurement){$/;"	f	class:KalmanFilter
determineCOPfoot	zmp-bkp_today.cpp	/^double Robot::determineCOPfoot(double Fzl, double Fzr){    return(((Fzl\/(Fzl+Fzr))-0.5)*(-0.2)); }$/;"	f	class:Robot
determineCOPfoot	zmp_ctrl.bkp.cpp	/^double Robot::determineCOPfoot(double Fzl, double Fzr){    return(((Fzl\/(Fzl+Fzr))-0.5)*(-0.2)); }$/;"	f	class:Robot
determineCOPfoot	zmp_ctrl.cpp	/^    double Robot::determineCOPfoot(double Fzl, double Fzr){    return(((Fzl\/(Fzl+Fzr))-0.5)*(-0.2)); }$/;"	f	class:Robot
determineCOPfoot	zmptmp.cpp	/^double Robot::determineCOPfoot(double Fzl, double Fzr){    return(((Fzl\/(Fzl+Fzr))-0.5)*(-0.2)); }$/;"	f	class:Robot
determine_states_from_FK	zmp-bkp_today.cpp	/^void Robot::determine_states_from_FK(dxl_Actuator *dxl_actuator){$/;"	f	class:Robot
determine_states_from_FK	zmp_ctrl.bkp.cpp	/^    void Robot::determine_states_from_FK(dxl_Actuator *dxl_actuator){$/;"	f	class:Robot
determine_states_from_FK	zmp_ctrl.cpp	/^        void Robot::determine_states_from_FK(dxl_Actuator *dxl_actuator){$/;"	f	class:Robot
determine_states_from_FK	zmptmp.cpp	/^void Robot::determine_states_from_FK(dxl_Actuator *dxl_actuator){$/;"	f	class:Robot
direction	main.cpp	/^dlib::matrix<double, 3,1> direction;$/;"	v
drawTrajectory	zmp-bkp_today.cpp	/^void Robot::drawTrajectory(){$/;"	f	class:Robot
drawTrajectory	zmp_ctrl.bkp.cpp	/^    void Robot::drawTrajectory(){$/;"	f	class:Robot
drawTrajectory	zmp_ctrl.cpp	/^        void Robot::drawTrajectory(){$/;"	f	class:Robot
drawTrajectory	zmptmp.cpp	/^void Robot::drawTrajectory(){$/;"	f	class:Robot
endl	main.cpp	/^    << std::endl;$/;"	m	class:std	file:
endl	main.cpp	/^    gp << "set grid xtics mxtics ytics mytics" << std::endl;$/;"	m	class:std	file:
endl	main.cpp	/^    gp << "set term x11 0" << std::endl;$/;"	m	class:std	file:
endl	main.cpp	/^    gp << "set term x11 1" << std::endl;$/;"	m	class:std	file:
endl	main.cpp	/^    std::cout << "Mean time: " << mean << "ms" << std::endl;$/;"	m	class:std	file:
endl	main.cpp	/^    std::cout << "Publishing the walking data in a while ros::ok-loop. Press ctrl+c to stop" << std::endl;$/;"	m	class:std	file:
error_theta_max_torque_degree	main.cpp	/^    float error_theta_max_torque_degree = 1.0;$/;"	v
estimateState	kalman.cpp	/^void KalmanFilter::estimateState(double input, dlib::matrix<double> measurement, dlib::matrix<double,4,1> * x_est, dlib::matrix<double,2,1> * y_est){$/;"	f	class:KalmanFilter
estimateState	kalman_carttable.cpp	/^void KalmanFilter::estimateState(double input, dlib::matrix<double> measurement, dlib::matrix<double,4,1> * x_est, dlib::matrix<double,2,1> * y_est){$/;"	f	class:KalmanFilter
estimateState	kalman_no_offset.cpp	/^void KalmanFilter::estimateState(double input, dlib::matrix<double> measurement, dlib::matrix<double,4,1> * x_est, dlib::matrix<double,2,1> * y_est){$/;"	f	class:KalmanFilter
estimateState	kalman_stephen.cpp	/^void KalmanFilter::estimateState(double input, dlib::matrix<double> measurement, dlib::matrix<double,4,1> * x_est, dlib::matrix<double,2,1> * y_est){$/;"	f	class:KalmanFilter
estimateState	zmp-bkp_today.cpp	/^    void Robot::estimateState(){$/;"	f	class:Robot
estimateState	zmp_ctrl.bkp.cpp	/^void Robot::estimateState(){$/;"	f	class:Robot
estimateState	zmp_ctrl.cpp	/^void Robot::estimateState(){$/;"	f	class:Robot
estimateState	zmptmp.cpp	/^    void Robot::estimateState(){$/;"	f	class:Robot
extract_pos_of_vector	zmp-bkp_today.cpp	/^void extract_pos_of_vector(std::vector<dlib::matrix<double,3,1>> vector_array, std::vector<double> * pos){$/;"	f
extract_pos_of_vector	zmp_ctrl.bkp.cpp	/^void extract_pos_of_vector(std::vector<dlib::matrix<double,3,1>> vector_array, std::vector<double> * pos){$/;"	f
extract_pos_of_vector	zmp_ctrl.cpp	/^void extract_pos_of_vector(std::vector<dlib::matrix<double,3,1>> vector_array, std::vector<double> * pos){$/;"	f
extract_pos_of_vector	zmptmp.cpp	/^void extract_pos_of_vector(std::vector<dlib::matrix<double,3,1>> vector_array, std::vector<double> * pos){$/;"	f
fd	main.cpp	/^    int fd, fd2;$/;"	v
fd2	main.cpp	/^    int fd, fd2;$/;"	v
force_control_leg_length	zmp-bkp_today.cpp	/^void Robot::force_control_leg_length( double Fx, double Fz){$/;"	f	class:Robot
force_control_leg_length	zmp_ctrl.bkp.cpp	/^void Robot::force_control_leg_length( double Fx, double Fz){$/;"	f	class:Robot
force_control_leg_length	zmp_ctrl.cpp	/^void Robot::force_control_leg_length( double Fx, double Fz){$/;"	f	class:Robot
force_control_leg_length	zmptmp.cpp	/^void Robot::force_control_leg_length( double Fx, double Fz){$/;"	f	class:Robot
generate_foot_print_on_spline	zmp_ctrl.cpp	/^void Robot::generate_foot_print_on_spline(std::vector<double> xSpline, std::vector<double> ySpline, std::vector<double> * x_footprint_on_spline, std::vector<double> * y_footprint_on_spline,std::vector<double> * yaw_footprint_on_spline){$/;"	f	class:Robot
generate_orientated_spline	zmp_ctrl.cpp	/^        void Robot::generate_orientated_spline(double x, double y, double psi, int samples, std::vector<double> * xSpline, std::vector<double> * ySpline){$/;"	f	class:Robot
get_forward_kinematics	motion_ctrl.cpp	/^void  Motion_Ctrl::get_forward_kinematics(float L1, float L2, float *X, float *Y, float Theta1, float Theta2)$/;"	f	class:Motion_Ctrl
get_inverse_kinematics	motion_ctrl.cpp	/^void  Motion_Ctrl::get_inverse_kinematics(float L1, float L2, float X, float Y, float *Theta1, float *Theta2)$/;"	f	class:Motion_Ctrl
get_time_step	zmp-bkp_today.cpp	/^int Robot::get_time_step(){return time_step;}$/;"	f	class:Robot
get_time_step	zmp_ctrl.cpp	/^int Robot::get_time_step(){return time_step;}$/;"	f	class:Robot
get_time_step	zmptmp.cpp	/^int Robot::get_time_step(){return time_step;}$/;"	f	class:Robot
get_vsw_stand	motion_ctrl.cpp	/^void  Motion_Ctrl::get_vsw_stand(float *_stand, int nNum)$/;"	f	class:Motion_Ctrl
goto_zero	motion_ctrl.cpp	/^bool Motion_Ctrl::goto_zero(dxl_Actuator *dxl_actuator)$/;"	f	class:Motion_Ctrl
goto_zero	zmp-bkp_today.cpp	/^bool Robot::goto_zero(dxl_Actuator *dxl_actuator){$/;"	f	class:Robot
goto_zero	zmp_ctrl.bkp.cpp	/^bool Robot::goto_zero(dxl_Actuator *dxl_actuator){$/;"	f	class:Robot
goto_zero	zmp_ctrl.cpp	/^bool Robot::goto_zero(dxl_Actuator *dxl_actuator){$/;"	f	class:Robot
goto_zero	zmptmp.cpp	/^bool Robot::goto_zero(dxl_Actuator *dxl_actuator){$/;"	f	class:Robot
gyro_xf	main.cpp	/^double gyro_xh, gyro_yh, gyro_zh, gyro_xf, gyro_yf, gyro_zf;$/;"	v
gyro_xf_vector	main.cpp	/^std::vector<double> gyro_xh_vector, gyro_yh_vector, gyro_zh_vector, gyro_xf_vector, gyro_yf_vector, gyro_zf_vector;$/;"	v
gyro_xh	main.cpp	/^double gyro_xh, gyro_yh, gyro_zh, gyro_xf, gyro_yf, gyro_zf;$/;"	v
gyro_xh_vector	main.cpp	/^std::vector<double> gyro_xh_vector, gyro_yh_vector, gyro_zh_vector, gyro_xf_vector, gyro_yf_vector, gyro_zf_vector;$/;"	v
gyro_yf	main.cpp	/^double gyro_xh, gyro_yh, gyro_zh, gyro_xf, gyro_yf, gyro_zf;$/;"	v
gyro_yf_vector	main.cpp	/^std::vector<double> gyro_xh_vector, gyro_yh_vector, gyro_zh_vector, gyro_xf_vector, gyro_yf_vector, gyro_zf_vector;$/;"	v
gyro_yh	main.cpp	/^double gyro_xh, gyro_yh, gyro_zh, gyro_xf, gyro_yf, gyro_zf;$/;"	v
gyro_yh_vector	main.cpp	/^std::vector<double> gyro_xh_vector, gyro_yh_vector, gyro_zh_vector, gyro_xf_vector, gyro_yf_vector, gyro_zf_vector;$/;"	v
gyro_zf	main.cpp	/^double gyro_xh, gyro_yh, gyro_zh, gyro_xf, gyro_yf, gyro_zf;$/;"	v
gyro_zf_vector	main.cpp	/^std::vector<double> gyro_xh_vector, gyro_yh_vector, gyro_zh_vector, gyro_xf_vector, gyro_yf_vector, gyro_zf_vector;$/;"	v
gyro_zh	main.cpp	/^double gyro_xh, gyro_yh, gyro_zh, gyro_xf, gyro_yf, gyro_zf;$/;"	v
gyro_zh_vector	main.cpp	/^std::vector<double> gyro_xh_vector, gyro_yh_vector, gyro_zh_vector, gyro_xf_vector, gyro_yf_vector, gyro_zf_vector;$/;"	v
initKalman	zmp-bkp_today.cpp	/^void Robot::initKalman(){$/;"	f	class:Robot
initKalman	zmp_ctrl.bkp.cpp	/^void Robot::initKalman(){$/;"	f	class:Robot
initKalman	zmp_ctrl.cpp	/^void Robot::initKalman(){$/;"	f	class:Robot
initKalman	zmptmp.cpp	/^void Robot::initKalman(){$/;"	f	class:Robot
initKalmanFilter	kalman.cpp	/^void KalmanFilter::initKalmanFilter(){$/;"	f	class:KalmanFilter
initKalmanFilter	kalman_carttable.cpp	/^void KalmanFilter::initKalmanFilter(){$/;"	f	class:KalmanFilter
initKalmanFilter	kalman_no_offset.cpp	/^void KalmanFilter::initKalmanFilter(){$/;"	f	class:KalmanFilter
initKalmanFilter	kalman_stephen.cpp	/^void KalmanFilter::initKalmanFilter(){$/;"	f	class:KalmanFilter
is_at_ref	main.cpp	/^dlib::matrix<double,3,1> is_at_ref;$/;"	v
is_touching_ground	zmp-bkp_today.cpp	/^int Robot::is_touching_ground(){$/;"	f	class:Robot
is_touching_ground	zmp_ctrl.cpp	/^int Robot::is_touching_ground(){$/;"	f	class:Robot
is_touching_ground	zmptmp.cpp	/^int Robot::is_touching_ground(){$/;"	f	class:Robot
landing_phase	main.cpp	/^std::vector<double> landing_phase;$/;"	v
left_foot_is_support_leg	zmp-bkp_today.cpp	/^void Robot::left_foot_is_support_leg(){    leftIsSupportLeg = (sign(ref_y_support_foot_trajectory.at(time_step)) == 1);}$/;"	f	class:Robot
left_foot_is_support_leg	zmp_ctrl.bkp.cpp	/^void Robot::left_foot_is_support_leg(){    leftIsSupportLeg = (sign(ref_y_support_foot_trajectory.at(time_step)) == -1);}$/;"	f	class:Robot
left_foot_is_support_leg	zmp_ctrl.cpp	/^void Robot::left_foot_is_support_leg(){    leftIsSupportLeg = (sign(ref_y_support_foot_trajectory.at(time_step)) == 1);}$/;"	f	class:Robot
left_foot_is_support_leg	zmptmp.cpp	/^void Robot::left_foot_is_support_leg(){    leftIsSupportLeg = (sign(ref_y_support_foot_trajectory.at(time_step)) == 1);}$/;"	f	class:Robot
left_support_foot_state	main.cpp	/^joint_state left_support_foot_state;$/;"	v
left_swing_foot_state	main.cpp	/^joint_state left_swing_foot_state;$/;"	v
matrix_mul_matrix	motion_ctrl.cpp	/^void Robot_Model::matrix_mul_matrix(struct Trans_matrix *_C1, struct Trans_matrix *_C2, struct Trans_matrix *_C_result)$/;"	f	class:Robot_Model
matrix_mul_vector	motion_ctrl.cpp	/^void Robot_Model::matrix_mul_vector(struct Trans_matrix *_C, struct Pos *pos, struct Pos *pos_result)$/;"	f	class:Robot_Model
matrix_test	motion_ctrl.cpp	/^void Robot_Model::matrix_test()$/;"	f	class:Robot_Model
maxTorque	main.cpp	/^    int32_t maxTorque = 620;$/;"	v
mean	main.cpp	/^    double mean = sum \/ total_time.size();$/;"	v
minTorque	main.cpp	/^    int32_t minTorque = -620;$/;"	v
modify_swing_foot_trajectory	zmp-bkp_today.cpp	/^int Robot::modify_swing_foot_trajectory(double Fx, double Fz){$/;"	f	class:Robot
modify_swing_foot_trajectory	zmp_ctrl.bkp.cpp	/^int Robot::modify_swing_foot_trajectory(double Fx, double Fz){$/;"	f	class:Robot
modify_swing_foot_trajectory	zmp_ctrl.cpp	/^int Robot::modify_swing_foot_trajectory(double Fx, double Fz){$/;"	f	class:Robot
modify_swing_foot_trajectory	zmptmp.cpp	/^int Robot::modify_swing_foot_trajectory(double Fx, double Fz){$/;"	f	class:Robot
motor_angle	main.cpp	/^    Initial(motor_angle);$/;"	v
msg	main.cpp	/^    biped_gait::gait_angle msg;$/;"	v
msg_joint_state	main.cpp	/^    sensor_msgs::JointState msg_joint_state;$/;"	v
n	main.cpp	/^    ros::NodeHandle n;$/;"	v
negtive_torque_max_velocity	main.cpp	/^    float negtive_torque_max_velocity = 600;$/;"	v
orientation_offset_l	main.cpp	/^dlib::matrix<double,3,1> orientation_offset_l, orientation_offset_r;$/;"	v
orientation_offset_r	main.cpp	/^dlib::matrix<double,3,1> orientation_offset_l, orientation_offset_r;$/;"	v
outMax	main.cpp	/^    int32_t outMax = 300;$/;"	v
outMin	main.cpp	/^    int32_t outMin = -300;$/;"	v
p_real	main.cpp	/^    std::vector<double> p_ref_x_transition, p_ref_y_transition, p_ref_z_transition, p_real;$/;"	v
p_ref_x	main.cpp	/^    std::vector<double> p_ref_x, p_ref_y,p_ref_x_heel, p_ref_y_heel, p_ref_z, p_ref_x_follow, p_ref_y_follow;$/;"	v
p_ref_x_follow	main.cpp	/^    std::vector<double> p_ref_x, p_ref_y,p_ref_x_heel, p_ref_y_heel, p_ref_z, p_ref_x_follow, p_ref_y_follow;$/;"	v
p_ref_x_heel	main.cpp	/^    std::vector<double> p_ref_x, p_ref_y,p_ref_x_heel, p_ref_y_heel, p_ref_z, p_ref_x_follow, p_ref_y_follow;$/;"	v
p_ref_x_transition	main.cpp	/^    std::vector<double> p_ref_x_transition, p_ref_y_transition, p_ref_z_transition, p_real;$/;"	v
p_ref_y	main.cpp	/^    std::vector<double> p_ref_x, p_ref_y,p_ref_x_heel, p_ref_y_heel, p_ref_z, p_ref_x_follow, p_ref_y_follow;$/;"	v
p_ref_y_follow	main.cpp	/^    std::vector<double> p_ref_x, p_ref_y,p_ref_x_heel, p_ref_y_heel, p_ref_z, p_ref_x_follow, p_ref_y_follow;$/;"	v
p_ref_y_heel	main.cpp	/^    std::vector<double> p_ref_x, p_ref_y,p_ref_x_heel, p_ref_y_heel, p_ref_z, p_ref_x_follow, p_ref_y_follow;$/;"	v
p_ref_y_transition	main.cpp	/^    std::vector<double> p_ref_x_transition, p_ref_y_transition, p_ref_z_transition, p_real;$/;"	v
p_ref_z	main.cpp	/^    std::vector<double> p_ref_x, p_ref_y,p_ref_x_heel, p_ref_y_heel, p_ref_z, p_ref_x_follow, p_ref_y_follow;$/;"	v
p_ref_z_transition	main.cpp	/^    std::vector<double> p_ref_x_transition, p_ref_y_transition, p_ref_z_transition, p_real;$/;"	v
packetHandler	main.cpp	/^    PacketHandler *packetHandler = PacketHandler::GetPacketHandler(PROTOCOL_VERSION);$/;"	v
parameter_init	main.cpp	/^    set_LQR_gains(parameter_init);$/;"	v
phi_l	main.cpp	/^std::vector<double> phi_l, theta_l, psi_l, phi_r, theta_r, psi_r;$/;"	v
phi_r	main.cpp	/^std::vector<double> phi_l, theta_l, psi_l, phi_r, theta_r, psi_r;$/;"	v
phi_to_matrix	motion_ctrl.cpp	/^void Robot_Model::phi_to_matrix(float phi, int n, struct Trans_matrix *_C)$/;"	f	class:Robot_Model
phil_fk	main.cpp	/^std::vector<double> xl_fk, yl_fk, zl_fk, phil_fk, thetal_fk, psil_fk;$/;"	v
phir_fk	main.cpp	/^std::vector<double> xr_fk, yr_fk, zr_fk, phir_fk, thetar_fk, psir_fk;$/;"	v
pid_controller	main.cpp	/^    Pid_Controller *pid_controller = new Pid_Controller[12];$/;"	v
portHandler_gait	main.cpp	/^    PortHandler *portHandler_gait     = PortHandler::GetPortHandler(DEVICE_GAIT);$/;"	v
position_left_foot_x	main.cpp	/^double ZMP_x_measure, ZMP_y_measure, position_left_foot_x, position_right_foot_x, Fzl;$/;"	v
position_right_foot_x	main.cpp	/^double ZMP_x_measure, ZMP_y_measure, position_left_foot_x, position_right_foot_x, Fzl;$/;"	v
predict_state	kalman.cpp	/^void KalmanFilter::predict_state(double input){$/;"	f	class:KalmanFilter
predict_state	kalman_carttable.cpp	/^void KalmanFilter::predict_state(double input){$/;"	f	class:KalmanFilter
predict_state	kalman_no_offset.cpp	/^void KalmanFilter::predict_state(double input){$/;"	f	class:KalmanFilter
predict_state	kalman_stephen.cpp	/^void KalmanFilter::predict_state(double input){$/;"	f	class:KalmanFilter
printJointAnglesToFile	zmp-bkp_today.cpp	/^void Robot::printJointAnglesToFile(){$/;"	f	class:Robot
printJointAnglesToFile	zmp_ctrl.bkp.cpp	/^    void Robot::printJointAnglesToFile(){$/;"	f	class:Robot
printJointAnglesToFile	zmp_ctrl.cpp	/^        void Robot::printJointAnglesToFile(){$/;"	f	class:Robot
printJointAnglesToFile	zmptmp.cpp	/^void Robot::printJointAnglesToFile(){$/;"	f	class:Robot
psi_l	main.cpp	/^std::vector<double> phi_l, theta_l, psi_l, phi_r, theta_r, psi_r;$/;"	v
psi_r	main.cpp	/^std::vector<double> phi_l, theta_l, psi_l, phi_r, theta_r, psi_r;$/;"	v
psil_fk	main.cpp	/^std::vector<double> xl_fk, yl_fk, zl_fk, phil_fk, thetal_fk, psil_fk;$/;"	v
psir_fk	main.cpp	/^std::vector<double> xr_fk, yr_fk, zr_fk, phir_fk, thetar_fk, psir_fk;$/;"	v
publisher_walking_data	main.cpp	/^    ros::Publisher publisher_walking_data = n.advertise<biped_gait::walking_data_all>("walking_data", 1);$/;"	v
push_into_gait_packet	zmp-bkp_today.cpp	/^void Robot::push_into_gait_packet(float gait_packet[]){$/;"	f	class:Robot
push_into_gait_packet	zmp_ctrl.bkp.cpp	/^    void Robot::push_into_gait_packet(float gait_packet[]){$/;"	f	class:Robot
push_into_gait_packet	zmp_ctrl.cpp	/^        void Robot::push_into_gait_packet(float gait_packet[]){$/;"	f	class:Robot
push_into_gait_packet	zmptmp.cpp	/^void Robot::push_into_gait_packet(float gait_packet[]){$/;"	f	class:Robot
q0	main.cpp	/^    std::vector<double> q0, q1, q2, q3, q4, q5, q6, q7, q8, q9, q10, q11;$/;"	v
q0_ref	main.cpp	/^    std::vector<double> q0_ref, q1_ref, q2_ref, q3_ref, q4_ref, q5_ref, q6_ref, q7_ref, q8_ref, q9_ref, q10_ref, q11_ref;$/;"	v
q0d	main.cpp	/^    std::vector<double> q0d, q1d, q2d, q3d, q4d, q5d, q6d, q7d, q8d, q9d, q10d, q11d;$/;"	v
q0dd	main.cpp	/^    std::vector<double> q0dd, q1dd, q2dd, q3dd, q4dd, q5dd, q6dd, q7dd, q8dd, q9dd, q10dd, q11dd;$/;"	v
q1	main.cpp	/^    std::vector<double> q0, q1, q2, q3, q4, q5, q6, q7, q8, q9, q10, q11;$/;"	v
q10	main.cpp	/^    std::vector<double> q0, q1, q2, q3, q4, q5, q6, q7, q8, q9, q10, q11;$/;"	v
q10_ref	main.cpp	/^    std::vector<double> q0_ref, q1_ref, q2_ref, q3_ref, q4_ref, q5_ref, q6_ref, q7_ref, q8_ref, q9_ref, q10_ref, q11_ref;$/;"	v
q10_vector	main.cpp	/^std::vector<double> q4_vector, q10_vector;$/;"	v
q10d	main.cpp	/^    std::vector<double> q0d, q1d, q2d, q3d, q4d, q5d, q6d, q7d, q8d, q9d, q10d, q11d;$/;"	v
q10dd	main.cpp	/^    std::vector<double> q0dd, q1dd, q2dd, q3dd, q4dd, q5dd, q6dd, q7dd, q8dd, q9dd, q10dd, q11dd;$/;"	v
q11	main.cpp	/^    std::vector<double> q0, q1, q2, q3, q4, q5, q6, q7, q8, q9, q10, q11;$/;"	v
q11_ref	main.cpp	/^    std::vector<double> q0_ref, q1_ref, q2_ref, q3_ref, q4_ref, q5_ref, q6_ref, q7_ref, q8_ref, q9_ref, q10_ref, q11_ref;$/;"	v
q11d	main.cpp	/^    std::vector<double> q0d, q1d, q2d, q3d, q4d, q5d, q6d, q7d, q8d, q9d, q10d, q11d;$/;"	v
q11dd	main.cpp	/^    std::vector<double> q0dd, q1dd, q2dd, q3dd, q4dd, q5dd, q6dd, q7dd, q8dd, q9dd, q10dd, q11dd;$/;"	v
q1_ref	main.cpp	/^    std::vector<double> q0_ref, q1_ref, q2_ref, q3_ref, q4_ref, q5_ref, q6_ref, q7_ref, q8_ref, q9_ref, q10_ref, q11_ref;$/;"	v
q1d	main.cpp	/^    std::vector<double> q0d, q1d, q2d, q3d, q4d, q5d, q6d, q7d, q8d, q9d, q10d, q11d;$/;"	v
q1dd	main.cpp	/^    std::vector<double> q0dd, q1dd, q2dd, q3dd, q4dd, q5dd, q6dd, q7dd, q8dd, q9dd, q10dd, q11dd;$/;"	v
q2	main.cpp	/^    std::vector<double> q0, q1, q2, q3, q4, q5, q6, q7, q8, q9, q10, q11;$/;"	v
q2_ref	main.cpp	/^    std::vector<double> q0_ref, q1_ref, q2_ref, q3_ref, q4_ref, q5_ref, q6_ref, q7_ref, q8_ref, q9_ref, q10_ref, q11_ref;$/;"	v
q2d	main.cpp	/^    std::vector<double> q0d, q1d, q2d, q3d, q4d, q5d, q6d, q7d, q8d, q9d, q10d, q11d;$/;"	v
q2dd	main.cpp	/^    std::vector<double> q0dd, q1dd, q2dd, q3dd, q4dd, q5dd, q6dd, q7dd, q8dd, q9dd, q10dd, q11dd;$/;"	v
q3	main.cpp	/^    std::vector<double> q0, q1, q2, q3, q4, q5, q6, q7, q8, q9, q10, q11;$/;"	v
q3_ref	main.cpp	/^    std::vector<double> q0_ref, q1_ref, q2_ref, q3_ref, q4_ref, q5_ref, q6_ref, q7_ref, q8_ref, q9_ref, q10_ref, q11_ref;$/;"	v
q3d	main.cpp	/^    std::vector<double> q0d, q1d, q2d, q3d, q4d, q5d, q6d, q7d, q8d, q9d, q10d, q11d;$/;"	v
q3dd	main.cpp	/^    std::vector<double> q0dd, q1dd, q2dd, q3dd, q4dd, q5dd, q6dd, q7dd, q8dd, q9dd, q10dd, q11dd;$/;"	v
q4	main.cpp	/^    std::vector<double> q0, q1, q2, q3, q4, q5, q6, q7, q8, q9, q10, q11;$/;"	v
q4_ref	main.cpp	/^    std::vector<double> q0_ref, q1_ref, q2_ref, q3_ref, q4_ref, q5_ref, q6_ref, q7_ref, q8_ref, q9_ref, q10_ref, q11_ref;$/;"	v
q4_vector	main.cpp	/^std::vector<double> q4_vector, q10_vector;$/;"	v
q4d	main.cpp	/^    std::vector<double> q0d, q1d, q2d, q3d, q4d, q5d, q6d, q7d, q8d, q9d, q10d, q11d;$/;"	v
q4dd	main.cpp	/^    std::vector<double> q0dd, q1dd, q2dd, q3dd, q4dd, q5dd, q6dd, q7dd, q8dd, q9dd, q10dd, q11dd;$/;"	v
q5	main.cpp	/^    std::vector<double> q0, q1, q2, q3, q4, q5, q6, q7, q8, q9, q10, q11;$/;"	v
q5_ref	main.cpp	/^    std::vector<double> q0_ref, q1_ref, q2_ref, q3_ref, q4_ref, q5_ref, q6_ref, q7_ref, q8_ref, q9_ref, q10_ref, q11_ref;$/;"	v
q5d	main.cpp	/^    std::vector<double> q0d, q1d, q2d, q3d, q4d, q5d, q6d, q7d, q8d, q9d, q10d, q11d;$/;"	v
q5dd	main.cpp	/^    std::vector<double> q0dd, q1dd, q2dd, q3dd, q4dd, q5dd, q6dd, q7dd, q8dd, q9dd, q10dd, q11dd;$/;"	v
q6	main.cpp	/^    std::vector<double> q0, q1, q2, q3, q4, q5, q6, q7, q8, q9, q10, q11;$/;"	v
q6_ref	main.cpp	/^    std::vector<double> q0_ref, q1_ref, q2_ref, q3_ref, q4_ref, q5_ref, q6_ref, q7_ref, q8_ref, q9_ref, q10_ref, q11_ref;$/;"	v
q6d	main.cpp	/^    std::vector<double> q0d, q1d, q2d, q3d, q4d, q5d, q6d, q7d, q8d, q9d, q10d, q11d;$/;"	v
q6dd	main.cpp	/^    std::vector<double> q0dd, q1dd, q2dd, q3dd, q4dd, q5dd, q6dd, q7dd, q8dd, q9dd, q10dd, q11dd;$/;"	v
q7	main.cpp	/^    std::vector<double> q0, q1, q2, q3, q4, q5, q6, q7, q8, q9, q10, q11;$/;"	v
q7_ref	main.cpp	/^    std::vector<double> q0_ref, q1_ref, q2_ref, q3_ref, q4_ref, q5_ref, q6_ref, q7_ref, q8_ref, q9_ref, q10_ref, q11_ref;$/;"	v
q7d	main.cpp	/^    std::vector<double> q0d, q1d, q2d, q3d, q4d, q5d, q6d, q7d, q8d, q9d, q10d, q11d;$/;"	v
q7dd	main.cpp	/^    std::vector<double> q0dd, q1dd, q2dd, q3dd, q4dd, q5dd, q6dd, q7dd, q8dd, q9dd, q10dd, q11dd;$/;"	v
q8	main.cpp	/^    std::vector<double> q0, q1, q2, q3, q4, q5, q6, q7, q8, q9, q10, q11;$/;"	v
q8_ref	main.cpp	/^    std::vector<double> q0_ref, q1_ref, q2_ref, q3_ref, q4_ref, q5_ref, q6_ref, q7_ref, q8_ref, q9_ref, q10_ref, q11_ref;$/;"	v
q8d	main.cpp	/^    std::vector<double> q0d, q1d, q2d, q3d, q4d, q5d, q6d, q7d, q8d, q9d, q10d, q11d;$/;"	v
q8dd	main.cpp	/^    std::vector<double> q0dd, q1dd, q2dd, q3dd, q4dd, q5dd, q6dd, q7dd, q8dd, q9dd, q10dd, q11dd;$/;"	v
q9	main.cpp	/^    std::vector<double> q0, q1, q2, q3, q4, q5, q6, q7, q8, q9, q10, q11;$/;"	v
q9_ref	main.cpp	/^    std::vector<double> q0_ref, q1_ref, q2_ref, q3_ref, q4_ref, q5_ref, q6_ref, q7_ref, q8_ref, q9_ref, q10_ref, q11_ref;$/;"	v
q9d	main.cpp	/^    std::vector<double> q0d, q1d, q2d, q3d, q4d, q5d, q6d, q7d, q8d, q9d, q10d, q11d;$/;"	v
q9dd	main.cpp	/^    std::vector<double> q0dd, q1dd, q2dd, q3dd, q4dd, q5dd, q6dd, q7dd, q8dd, q9dd, q10dd, q11dd;$/;"	v
q_f	foot_for_3s_15cm.cpp	/^    double q_f = 0*pi\/180;$/;"	v
read_para	motion_ctrl.cpp	/^void Motion_Ctrl::read_para()$/;"	f	class:Motion_Ctrl
reading_sensor	main.cpp	/^    int reading_sensor           = 1;$/;"	v
right_support_foot_state	main.cpp	/^joint_state right_support_foot_state;$/;"	v
right_swing_foot_state	main.cpp	/^joint_state right_swing_foot_state;$/;"	v
rotm2eul	zmp-bkp_today.cpp	/^void Robot::rotm2eul(dlib::matrix<double, 3, 3> R, double * phi, double * theta, double * psi){$/;"	f	class:Robot
rotm2eul	zmp_ctrl.bkp.cpp	/^void Robot::rotm2eul(dlib::matrix<double, 3, 3> R, double * phi, double * theta, double * psi){$/;"	f	class:Robot
rotm2eul	zmp_ctrl.cpp	/^    void Robot::rotm2eul(dlib::matrix<double, 3, 3> R, double * phi, double * theta, double * psi){$/;"	f	class:Robot
rotm2eul	zmptmp.cpp	/^void Robot::rotm2eul(dlib::matrix<double, 3, 3> R, double * phi, double * theta, double * psi){$/;"	f	class:Robot
run_tra	motion_ctrl.cpp	/^void  Motion_Ctrl::run_tra(dxl_Actuator *dxl_actuator, int nNum)$/;"	f	class:Motion_Ctrl
run_vsw	motion_ctrl.cpp	/^void Motion_Ctrl::run_vsw(dxl_Actuator *dxl_actuator, int nNum)$/;"	f	class:Motion_Ctrl
setQ	kalman.cpp	/^void KalmanFilter::setQ(double Q_proc){$/;"	f	class:KalmanFilter
setQ	kalman_carttable.cpp	/^void KalmanFilter::setQ(double Q_proc){$/;"	f	class:KalmanFilter
setQ	kalman_no_offset.cpp	/^void KalmanFilter::setQ(double Q_proc){$/;"	f	class:KalmanFilter
setQ	kalman_stephen.cpp	/^void KalmanFilter::setQ(double Q_proc){$/;"	f	class:KalmanFilter
setR	kalman.cpp	/^void KalmanFilter::setR(dlib::matrix<double> R_meas){$/;"	f	class:KalmanFilter
setR	kalman_carttable.cpp	/^void KalmanFilter::setR(dlib::matrix<double> R_meas){$/;"	f	class:KalmanFilter
setR	kalman_no_offset.cpp	/^void KalmanFilter::setR(dlib::matrix<double> R_meas){$/;"	f	class:KalmanFilter
setR	kalman_stephen.cpp	/^void KalmanFilter::setR(dlib::matrix<double> R_meas){$/;"	f	class:KalmanFilter
set_LQR_gains	zmp-bkp_today.cpp	/^void Robot::set_LQR_gains(){$/;"	f	class:Robot
set_LQR_gains	zmp_ctrl.bkp.cpp	/^void Robot::set_LQR_gains(){$/;"	f	class:Robot
set_LQR_gains	zmp_ctrl.cpp	/^void Robot::set_LQR_gains(){$/;"	f	class:Robot
set_LQR_gains	zmptmp.cpp	/^void Robot::set_LQR_gains(){$/;"	f	class:Robot
set_ic_P	kalman.cpp	/^void KalmanFilter::set_ic_P(dlib::matrix<double> P0){P_aposteriori = P0;}$/;"	f	class:KalmanFilter
set_ic_P	kalman_carttable.cpp	/^void KalmanFilter::set_ic_P(dlib::matrix<double> P0){P_aposteriori = P0;}$/;"	f	class:KalmanFilter
set_ic_P	kalman_no_offset.cpp	/^void KalmanFilter::set_ic_P(dlib::matrix<double> P0){P_aposteriori = P0;}$/;"	f	class:KalmanFilter
set_ic_P	kalman_stephen.cpp	/^void KalmanFilter::set_ic_P(dlib::matrix<double> P0){P_aposteriori = P0;}$/;"	f	class:KalmanFilter
set_ic_x	kalman.cpp	/^void KalmanFilter::set_ic_x(dlib::matrix<double> x0){x_aposteriori = x0;}$/;"	f	class:KalmanFilter
set_ic_x	kalman_carttable.cpp	/^void KalmanFilter::set_ic_x(dlib::matrix<double> x0){x_aposteriori = x0;}$/;"	f	class:KalmanFilter
set_ic_x	kalman_no_offset.cpp	/^void KalmanFilter::set_ic_x(dlib::matrix<double> x0){x_aposteriori = x0;}$/;"	f	class:KalmanFilter
set_ic_x	kalman_stephen.cpp	/^void KalmanFilter::set_ic_x(dlib::matrix<double> x0){x_aposteriori = x0;}$/;"	f	class:KalmanFilter
set_parameters	zmp-bkp_today.cpp	/^void Robot::set_parameters(){$/;"	f	class:Robot
set_parameters	zmp_ctrl.bkp.cpp	/^void Robot::set_parameters(){$/;"	f	class:Robot
set_parameters	zmp_ctrl.cpp	/^void Robot::set_parameters(){$/;"	f	class:Robot
set_parameters	zmptmp.cpp	/^void Robot::set_parameters(){$/;"	f	class:Robot
sigIntHandler	main.cpp	/^    struct sigaction sigIntHandler;$/;"	v	typeref:struct:sigaction
sign	zmp-bkp_today.cpp	/^int sign(double x){return (x > 0) - (x < 0);}$/;"	f
sign	zmp_ctrl.bkp.cpp	/^int sign(double x){return (x > 0) - (x < 0);}$/;"	f
sign	zmp_ctrl.cpp	/^int sign(double x){return (x > 0) - (x < 0);}$/;"	f
sign	zmptmp.cpp	/^int sign(double x){return (x > 0) - (x < 0);}$/;"	f
softening_ankle	zmp-bkp_today.cpp	/^void Robot::softening_ankle(int left, int32_t * t_x, int32_t * t_y){$/;"	f	class:Robot
softening_ankle	zmp_ctrl.bkp.cpp	/^void Robot::softening_ankle(int left, int32_t * t_x, int32_t * t_y){$/;"	f	class:Robot
softening_ankle	zmp_ctrl.cpp	/^    void Robot::softening_ankle(int left, int32_t * t_x, int32_t * t_y){$/;"	f	class:Robot
softening_ankle	zmptmp.cpp	/^void Robot::softening_ankle(int left, int32_t * t_x, int32_t * t_y){$/;"	f	class:Robot
stamp	main.cpp	/^std::vector<double> stamp, time_msg, t_vector;$/;"	v
stand	motion_ctrl.cpp	/^void Motion_Ctrl::stand(dxl_Actuator *dxl_actuator, int nNum)$/;"	f	class:Motion_Ctrl
stand	zmp-bkp_today.cpp	/^void Robot::stand(dxl_Actuator *dxl_actuator, int nNum){$/;"	f	class:Robot
stand	zmp_ctrl.bkp.cpp	/^void Robot::stand(dxl_Actuator *dxl_actuator, int nNum){$/;"	f	class:Robot
stand	zmp_ctrl.cpp	/^void Robot::stand(dxl_Actuator *dxl_actuator, int nNum){$/;"	f	class:Robot
stand	zmptmp.cpp	/^void Robot::stand(dxl_Actuator *dxl_actuator, int nNum){$/;"	f	class:Robot
start_foot_landing_control	zmp-bkp_today.cpp	/^void Robot::start_foot_landing_control(){$/;"	f	class:Robot
start_foot_landing_control	zmp_ctrl.bkp.cpp	/^void Robot::start_foot_landing_control(){$/;"	f	class:Robot
start_foot_landing_control	zmp_ctrl.cpp	/^    void Robot::start_foot_landing_control(){$/;"	f	class:Robot
start_foot_landing_control	zmptmp.cpp	/^void Robot::start_foot_landing_control(){$/;"	f	class:Robot
status_update	main.cpp	/^    ros::ServiceServer status_update = n.advertiseService("status_update",status_call);$/;"	v
step_length	foot_for_3s_15cm.cpp	/^    double step_length = x_swing_foot_end-x_swing_foot_start;$/;"	v
stop	zmp-bkp_today.cpp	/^    void Robot::stop(dxl_Actuator *dxl_actuator, float gait_packet[]){$/;"	f	class:Robot
stop	zmp_ctrl.bkp.cpp	/^void Robot::stop(dxl_Actuator *dxl_actuator, float gait_packet[]){$/;"	f	class:Robot
stop	zmp_ctrl.cpp	/^void Robot::stop(dxl_Actuator *dxl_actuator, float gait_packet[]){$/;"	f	class:Robot
stop	zmptmp.cpp	/^    void Robot::stop(dxl_Actuator *dxl_actuator, float gait_packet[]){$/;"	f	class:Robot
subGyroFoot	main.cpp	/^    ros::Subscriber subGyroFoot = n.subscribe("gyro_angle_lfoot", 1000, getGyroDataFoot);$/;"	v
subGyroHip	main.cpp	/^    ros::Subscriber subGyroHip = n.subscribe("gyro_angle_hip", 1000, getGyroDataHip);$/;"	v
subZMP	main.cpp	/^    ros::Subscriber subZMP = n.subscribe("chatter", 1000, chatterCallback);$/;"	v
sum	main.cpp	/^    double sum = std::accumulate(total_time.begin(), total_time.end(), 0.0);$/;"	v
swinging_distance	foot_for_3s_15cm.cpp	/^    double swinging_distance = x_swing_foot_end - x_swing_foot_start;$/;"	v
t0	foot_for_3s_15cm.cpp	/^    double t0,t1,t2,t3,t4,t5,t6,t7,zk0,zk1,zk2,zk3,zk4,zk5,zk6, zk7;$/;"	v
t1	foot_for_3s_15cm.cpp	/^    double t0,t1,t2,t3,t4,t5,t6,t7,zk0,zk1,zk2,zk3,zk4,zk5,zk6, zk7;$/;"	v
t2	foot_for_3s_15cm.cpp	/^    double t0,t1,t2,t3,t4,t5,t6,t7,zk0,zk1,zk2,zk3,zk4,zk5,zk6, zk7;$/;"	v
t3	foot_for_3s_15cm.cpp	/^    double t0,t1,t2,t3,t4,t5,t6,t7,zk0,zk1,zk2,zk3,zk4,zk5,zk6, zk7;$/;"	v
t4	foot_for_3s_15cm.cpp	/^    double t0,t1,t2,t3,t4,t5,t6,t7,zk0,zk1,zk2,zk3,zk4,zk5,zk6, zk7;$/;"	v
t5	foot_for_3s_15cm.cpp	/^    double t0,t1,t2,t3,t4,t5,t6,t7,zk0,zk1,zk2,zk3,zk4,zk5,zk6, zk7;$/;"	v
t6	foot_for_3s_15cm.cpp	/^    double t0,t1,t2,t3,t4,t5,t6,t7,zk0,zk1,zk2,zk3,zk4,zk5,zk6, zk7;$/;"	v
t7	foot_for_3s_15cm.cpp	/^    double t0,t1,t2,t3,t4,t5,t6,t7,zk0,zk1,zk2,zk3,zk4,zk5,zk6, zk7;$/;"	v
t_control	main.cpp	/^    double Time_Now, t_control;$/;"	v
t_control_init	main.cpp	/^    double t_control_init = 0;$/;"	v
t_initial	main.cpp	/^double t_initial, time_passed;$/;"	v
t_vector	main.cpp	/^std::vector<double> stamp, time_msg, t_vector;$/;"	v
tau0	main.cpp	/^    std::vector<double> tau0, tau1, tau2, tau3, tau4, tau5, tau6, tau7, tau8, tau9, tau10, tau11;$/;"	v
tau1	main.cpp	/^    std::vector<double> tau0, tau1, tau2, tau3, tau4, tau5, tau6, tau7, tau8, tau9, tau10, tau11;$/;"	v
tau10	main.cpp	/^    std::vector<double> tau0, tau1, tau2, tau3, tau4, tau5, tau6, tau7, tau8, tau9, tau10, tau11;$/;"	v
tau11	main.cpp	/^    std::vector<double> tau0, tau1, tau2, tau3, tau4, tau5, tau6, tau7, tau8, tau9, tau10, tau11;$/;"	v
tau2	main.cpp	/^    std::vector<double> tau0, tau1, tau2, tau3, tau4, tau5, tau6, tau7, tau8, tau9, tau10, tau11;$/;"	v
tau3	main.cpp	/^    std::vector<double> tau0, tau1, tau2, tau3, tau4, tau5, tau6, tau7, tau8, tau9, tau10, tau11;$/;"	v
tau4	main.cpp	/^    std::vector<double> tau0, tau1, tau2, tau3, tau4, tau5, tau6, tau7, tau8, tau9, tau10, tau11;$/;"	v
tau5	main.cpp	/^    std::vector<double> tau0, tau1, tau2, tau3, tau4, tau5, tau6, tau7, tau8, tau9, tau10, tau11;$/;"	v
tau6	main.cpp	/^    std::vector<double> tau0, tau1, tau2, tau3, tau4, tau5, tau6, tau7, tau8, tau9, tau10, tau11;$/;"	v
tau7	main.cpp	/^    std::vector<double> tau0, tau1, tau2, tau3, tau4, tau5, tau6, tau7, tau8, tau9, tau10, tau11;$/;"	v
tau8	main.cpp	/^    std::vector<double> tau0, tau1, tau2, tau3, tau4, tau5, tau6, tau7, tau8, tau9, tau10, tau11;$/;"	v
tau9	main.cpp	/^    std::vector<double> tau0, tau1, tau2, tau3, tau4, tau5, tau6, tau7, tau8, tau9, tau10, tau11;$/;"	v
theta_body	main.cpp	/^std::vector<double> theta_body;$/;"	v
theta_l	main.cpp	/^std::vector<double> phi_l, theta_l, psi_l, phi_r, theta_r, psi_r;$/;"	v
theta_r	main.cpp	/^std::vector<double> phi_l, theta_l, psi_l, phi_r, theta_r, psi_r;$/;"	v
theta_ref_swing_foot_complete	main.cpp	/^    std::vector<double> x_ref_swing_foot_complete, y_ref_swing_foot_complete, z_ref_swing_foot_complete, theta_ref_swing_foot_complete;$/;"	v
thetal_fk	main.cpp	/^std::vector<double> xl_fk, yl_fk, zl_fk, phil_fk, thetal_fk, psil_fk;$/;"	v
thetar_fk	main.cpp	/^std::vector<double> xr_fk, yr_fk, zr_fk, phir_fk, thetar_fk, psir_fk;$/;"	v
time_msg	main.cpp	/^std::vector<double> stamp, time_msg, t_vector;$/;"	v
time_passed	main.cpp	/^double t_initial, time_passed;$/;"	v
time_to_max_torque_s	main.cpp	/^    float time_to_max_torque_s = 8.0;  \/\/time to take from 1 degree error to full scale torque through integrator $/;"	v
total_time	main.cpp	/^std::vector<double> total_time;$/;"	v
tv	main.cpp	/^    struct timeval tv;$/;"	v	typeref:struct:timeval
tz	main.cpp	/^    struct timezone tz;$/;"	v	typeref:struct:timezone
u_kx_array	main.cpp	/^    std::vector<double> u_kx_array, u_ky_array;$/;"	v
u_ky_array	main.cpp	/^    std::vector<double> u_kx_array, u_ky_array;$/;"	v
update_ati	motion_ctrl.cpp	/^void  Motion_Ctrl::update_ati(gAti_Data *_ati)$/;"	f	class:Motion_Ctrl
update_ati	zmp-bkp_today.cpp	/^    void  Robot::update_ati(gAti_Data *_ati){$/;"	f	class:Robot
update_ati	zmp_ctrl.bkp.cpp	/^void  Robot::update_ati(gAti_Data *_ati){$/;"	f	class:Robot
update_ati	zmp_ctrl.cpp	/^void  Robot::update_ati(gAti_Data *_ati){$/;"	f	class:Robot
update_ati	zmptmp.cpp	/^    void  Robot::update_ati(gAti_Data *_ati){$/;"	f	class:Robot
update_com_position	motion_ctrl.cpp	/^void Robot_Model::update_com_position()$/;"	f	class:Robot_Model
update_inv_trans_matrix	motion_ctrl.cpp	/^void Robot_Model::update_inv_trans_matrix()$/;"	f	class:Robot_Model
update_joint_position	motion_ctrl.cpp	/^void Robot_Model::update_joint_position()$/;"	f	class:Robot_Model
update_mti	motion_ctrl.cpp	/^void  Motion_Ctrl::update_mti(gMti_Data _mti)$/;"	f	class:Motion_Ctrl
update_mti	zmp-bkp_today.cpp	/^    void  Robot::update_mti(gMti_Data _mti){$/;"	f	class:Robot
update_mti	zmp_ctrl.bkp.cpp	/^void  Robot::update_mti(gMti_Data _mti){$/;"	f	class:Robot
update_mti	zmp_ctrl.cpp	/^void  Robot::update_mti(gMti_Data _mti){$/;"	f	class:Robot
update_mti	zmptmp.cpp	/^    void  Robot::update_mti(gMti_Data _mti){$/;"	f	class:Robot
update_phi	motion_ctrl.cpp	/^void Robot_Model::update_phi()$/;"	f	class:Robot_Model
update_phi	motion_ctrl.cpp	/^void Robot_Model::update_phi(dxl_Actuator *dxl_actuator)$/;"	f	class:Robot_Model
update_time	motion_ctrl.cpp	/^void Motion_Ctrl::update_time(float time)$/;"	f	class:Motion_Ctrl
update_trans_matrix	motion_ctrl.cpp	/^void Robot_Model::update_trans_matrix()$/;"	f	class:Robot_Model
vector_plus_vector	motion_ctrl.cpp	/^void Robot_Model::vector_plus_vector( struct Pos *pos1, struct Pos *pos2, struct Pos *pos_result)$/;"	f	class:Robot_Model
vector_to_inv_matrix	motion_ctrl.cpp	/^void Robot_Model::vector_to_inv_matrix(struct Phi *phi, struct Trans_matrix *_C)$/;"	f	class:Robot_Model
vector_to_matrix	motion_ctrl.cpp	/^void Robot_Model::vector_to_matrix(struct Phi *phi, struct Trans_matrix *_C)$/;"	f	class:Robot_Model
walk	zmp-bkp_today.cpp	/^void Robot::walk(dxl_Actuator *dxl_actuator, float gait_packet[]){$/;"	f	class:Robot
walk	zmp_ctrl.bkp.cpp	/^void Robot::walk(dxl_Actuator *dxl_actuator, float gait_packet[]){$/;"	f	class:Robot
walk	zmp_ctrl.cpp	/^        void Robot::walk(dxl_Actuator *dxl_actuator, float gait_packet[]){$/;"	f	class:Robot
walk	zmptmp.cpp	/^void Robot::walk(dxl_Actuator *dxl_actuator, float gait_packet[]){$/;"	f	class:Robot
walking_data_msg	main.cpp	/^    biped_gait::walking_data_all walking_data_msg;$/;"	v
walking_generator	main.cpp	/^    ros::Publisher walking_generator = n.advertise<sensor_msgs::JointState>("joint_states", 1);$/;"	v
writing_servo	main.cpp	/^    int writing_servo            = 0;$/;"	v
x_init	main.cpp	/^    dlib::matrix<double, 3, 1> x_init, y_init;$/;"	v
x_ref	main.cpp	/^    std::vector<double> x_ref, y_ref, z_ref, x_ref_est, y_ref_est, x_ref_pred, y_ref_pred;$/;"	v
x_ref_est	main.cpp	/^    std::vector<double> x_ref, y_ref, z_ref, x_ref_est, y_ref_est, x_ref_pred, y_ref_pred;$/;"	v
x_ref_fk	main.cpp	/^std::vector<double> x_ref_fk, y_ref_fk;$/;"	v
x_ref_pred	main.cpp	/^    std::vector<double> x_ref, y_ref, z_ref, x_ref_est, y_ref_est, x_ref_pred, y_ref_pred;$/;"	v
x_ref_swing_foot_complete	main.cpp	/^    std::vector<double> x_ref_swing_foot_complete, y_ref_swing_foot_complete, z_ref_swing_foot_complete, theta_ref_swing_foot_complete;$/;"	v
x_support_complete	main.cpp	/^    std::vector<double> x_support_complete, y_support_complete, z_support_complete;$/;"	v
x_swing_complete	main.cpp	/^    std::vector<double> x_swing_complete, y_swing_complete, z_swing_complete;$/;"	v
xk0	foot_for_3s_15cm.cpp	/^    double xk0,xk1,xk2,xk3,xk4,xk5,xk6;$/;"	v
xk1	foot_for_3s_15cm.cpp	/^    double xk0,xk1,xk2,xk3,xk4,xk5,xk6;$/;"	v
xk2	foot_for_3s_15cm.cpp	/^    double xk0,xk1,xk2,xk3,xk4,xk5,xk6;$/;"	v
xk3	foot_for_3s_15cm.cpp	/^    double xk0,xk1,xk2,xk3,xk4,xk5,xk6;$/;"	v
xk4	foot_for_3s_15cm.cpp	/^    double xk0,xk1,xk2,xk3,xk4,xk5,xk6;$/;"	v
xk5	foot_for_3s_15cm.cpp	/^    double xk0,xk1,xk2,xk3,xk4,xk5,xk6;$/;"	v
xk6	foot_for_3s_15cm.cpp	/^    double xk0,xk1,xk2,xk3,xk4,xk5,xk6;$/;"	v
xl_fk	main.cpp	/^std::vector<double> xl_fk, yl_fk, zl_fk, phil_fk, thetal_fk, psil_fk;$/;"	v
xl_offset	main.cpp	/^double xl_offset, xr_offset, zl_offset, zr_offset;$/;"	v
xr_fk	main.cpp	/^std::vector<double> xr_fk, yr_fk, zr_fk, phir_fk, thetar_fk, psir_fk;$/;"	v
xr_offset	main.cpp	/^double xl_offset, xr_offset, zl_offset, zr_offset;$/;"	v
y_init	main.cpp	/^    dlib::matrix<double, 3, 1> x_init, y_init;$/;"	v
y_ref	main.cpp	/^    std::vector<double> x_ref, y_ref, z_ref, x_ref_est, y_ref_est, x_ref_pred, y_ref_pred;$/;"	v
y_ref_est	main.cpp	/^    std::vector<double> x_ref, y_ref, z_ref, x_ref_est, y_ref_est, x_ref_pred, y_ref_pred;$/;"	v
y_ref_fk	main.cpp	/^std::vector<double> x_ref_fk, y_ref_fk;$/;"	v
y_ref_pred	main.cpp	/^    std::vector<double> x_ref, y_ref, z_ref, x_ref_est, y_ref_est, x_ref_pred, y_ref_pred;$/;"	v
y_ref_swing_foot_complete	main.cpp	/^    std::vector<double> x_ref_swing_foot_complete, y_ref_swing_foot_complete, z_ref_swing_foot_complete, theta_ref_swing_foot_complete;$/;"	v
y_support_complete	main.cpp	/^    std::vector<double> x_support_complete, y_support_complete, z_support_complete;$/;"	v
y_swing_complete	main.cpp	/^    std::vector<double> x_swing_complete, y_swing_complete, z_swing_complete;$/;"	v
yl_fk	main.cpp	/^std::vector<double> xl_fk, yl_fk, zl_fk, phil_fk, thetal_fk, psil_fk;$/;"	v
yr_fk	main.cpp	/^std::vector<double> xr_fk, yr_fk, zr_fk, phir_fk, thetar_fk, psir_fk;$/;"	v
z_ref	main.cpp	/^    std::vector<double> x_ref, y_ref, z_ref, x_ref_est, y_ref_est, x_ref_pred, y_ref_pred;$/;"	v
z_ref_swing_foot_complete	main.cpp	/^    std::vector<double> x_ref_swing_foot_complete, y_ref_swing_foot_complete, z_ref_swing_foot_complete, theta_ref_swing_foot_complete;$/;"	v
z_ref_swing_foot_complete_unmodified	main.cpp	/^    std::vector<double> z_ref_swing_foot_complete_unmodified;$/;"	v
z_support_complete	main.cpp	/^    std::vector<double> x_support_complete, y_support_complete, z_support_complete;$/;"	v
z_swing_complete	main.cpp	/^    std::vector<double> x_swing_complete, y_swing_complete, z_swing_complete;$/;"	v
zk0	foot_for_3s_15cm.cpp	/^    double t0,t1,t2,t3,t4,t5,t6,t7,zk0,zk1,zk2,zk3,zk4,zk5,zk6, zk7;$/;"	v
zk1	foot_for_3s_15cm.cpp	/^    double t0,t1,t2,t3,t4,t5,t6,t7,zk0,zk1,zk2,zk3,zk4,zk5,zk6, zk7;$/;"	v
zk2	foot_for_3s_15cm.cpp	/^    double t0,t1,t2,t3,t4,t5,t6,t7,zk0,zk1,zk2,zk3,zk4,zk5,zk6, zk7;$/;"	v
zk3	foot_for_3s_15cm.cpp	/^    double t0,t1,t2,t3,t4,t5,t6,t7,zk0,zk1,zk2,zk3,zk4,zk5,zk6, zk7;$/;"	v
zk4	foot_for_3s_15cm.cpp	/^    double t0,t1,t2,t3,t4,t5,t6,t7,zk0,zk1,zk2,zk3,zk4,zk5,zk6, zk7;$/;"	v
zk5	foot_for_3s_15cm.cpp	/^    double t0,t1,t2,t3,t4,t5,t6,t7,zk0,zk1,zk2,zk3,zk4,zk5,zk6, zk7;$/;"	v
zk6	foot_for_3s_15cm.cpp	/^    double t0,t1,t2,t3,t4,t5,t6,t7,zk0,zk1,zk2,zk3,zk4,zk5,zk6, zk7;$/;"	v
zk7	foot_for_3s_15cm.cpp	/^    double t0,t1,t2,t3,t4,t5,t6,t7,zk0,zk1,zk2,zk3,zk4,zk5,zk6, zk7;$/;"	v
zl_fk	main.cpp	/^std::vector<double> xl_fk, yl_fk, zl_fk, phil_fk, thetal_fk, psil_fk;$/;"	v
zl_offset	main.cpp	/^double xl_offset, xr_offset, zl_offset, zr_offset;$/;"	v
zr_fk	main.cpp	/^std::vector<double> xr_fk, yr_fk, zr_fk, phir_fk, thetar_fk, psir_fk;$/;"	v
zr_offset	main.cpp	/^double xl_offset, xr_offset, zl_offset, zr_offset;$/;"	v
